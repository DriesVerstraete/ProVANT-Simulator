#include "Icontroller.hpp"
#include <iostream>
#include <Eigen/Eigen>
#include "simulator_msgs/Sensor.h"
#include <cmath>


struct Double322{
double Val[3][2][2];
};

class vant3_adaptiveMixCtrl : public Icontroller
{
	private: double e;
	private: double pi;

	//integrators
	private: double T;

	//Mapeamento
	private: Eigen::MatrixXd RI_B;
	private: Eigen::MatrixXd Wn;

	//dynamic controller
	private: Eigen::MatrixXd K;
	private: Eigen::MatrixXd K111;
	private: Eigen::MatrixXd K112;
	private: Eigen::MatrixXd K121;
	private: Eigen::MatrixXd K122;
	private: Eigen::MatrixXd K211;
	private: Eigen::MatrixXd K212;
	private: Eigen::MatrixXd K221;
	private: Eigen::MatrixXd K222;
	private: Eigen::MatrixXd K311;
	private: Eigen::MatrixXd K312;
	private: Eigen::MatrixXd K321;
	private: Eigen::MatrixXd K322;
	private: Eigen::VectorXd Uref;
	private: Eigen::VectorXd X;
	private: Eigen::VectorXd Xref;
	private: Eigen::VectorXd Erro;
	private: Eigen::VectorXd Input;
	private: Eigen::VectorXd SaveData;
	private: Eigen::VectorXd SaveDataRef;
	private: Eigen::VectorXd SaveDataError;
	private: double Angleref;

	//adaptive mixing
	private: Eigen::VectorXd center;
	private: Eigen::VectorXd cutoff;
	private: std::vector<double> psii;
	private: std::vector<double> mii;
	private: double BumpValues[3][2][2];

	//kinematic controller
	private: Eigen::VectorXd Trajectory;
	private: Eigen::MatrixXd Kk;
	private: Eigen::VectorXd Xk;
	private: Eigen::VectorXd Uk;
	private: Eigen::VectorXd Dk;
	private: Eigen::VectorXd Xki;
	private: Eigen::MatrixXd Kki;



	public: vant3_adaptiveMixCtrl(): Xref(18,1),        X(18,1),          Erro(18,1),           Input(6,1),      Trajectory(20,1),
   									    K(6,18),      center(6),           cutoff(6),              psii(6),       mii(6),           RI_B(3,3),  
							            Wn(3,3),        Kk(3,3),             Xk(3,1),              Uk(3,1),      Dk(3,1),           Uref(6,1),
								 SaveData(20,1),   SaveDataRef(20,1),  SaveDataError(20,1),     Kki(3,3),            Xki(3,1),
 								     K111(6,18),     K112(6,18),          K121(6,18),           K122(6,18),
 								     K211(6,18),     K212(6,18),          K221(6,18),           K222(6,18),
 								     K311(6,18),     K312(6,18),          K321(6,18),           K322(6,18)
	{	e = 2.718281828459046;
		pi = 3.141592653589793;
		//T = 0.012;
		T = 0.0012;
		Uref << 8.8,   8.8,  -5.2*pow(10,-4), -5.2*pow(10,-4), 0, 0;
		Angleref = 0.08;

//////// //13
////////K1 << 0.52283,-23.224,-3.4989,4.9001,0.18323,12.384,0.73798,-0.15163,-4.5017,45.987,4.8247,-4.1867,35.855,-32.179,-0.95675,0.038209,-27.447,-3.5293,
////////-0.67528,23.373,-3.0463,-4.9764,0.14567,-13.239,-0.035893,0.87221,-4.2521,-47.758,5.2002,3.8022,-32.675,36.959,-2.7614,-0.35825,27.95,3.6448,
////////-0.031075,0.018191,0.011941,0.003549,-0.038737,-0.037667,-0.0216,0.00066131,0.0084272,-0.025148,-0.20164,-0.035141,-0.26845,0.010005,0.0086508,-0.014021,0.011293,-0.016459,
////////-0.035584,-0.016413,0.009323,-0.0028171,-0.042215,0.041799,0.00062079,-0.022312,0.0042348,0.031851,-0.22752,0.035877,-0.00047935,-0.29397,0.0039902,-0.017369,-0.01271,0.020486,
////////-0.29144,0.099778,-0.1328,-0.0013593,-0.28671,-0.13367,-0.0061648,-0.0036172,-0.13161,-0.17879,-1.7945,-0.078389,-0.95933,-0.68681,-0.12899,-0.23877,0.038917,-0.13697,
////////0.28293,-0.18555,0.32281,-0.017207,0.28085,0.16302,-0.029393,-0.032636,0.40623,0.2392,1.5436,0.093304,0.94517,0.58205,0.21939,0.23857,-0.15809,0.11265;

////////K2 << -1.9102,-17.369,-4.441,4.5513,-0.84956,13.82,0.92327,-0.35259,-4.5012,33.489,9.3337,-8.1048,37.554,-41.351,-1.2587,-1.3634,-22.601,-6.2334,
////////0.10135,18.075,-2.3293,-4.5764,0.9595,-15.475,-0.2468,1.0803,-3.5053,-35.661,13.767,7.9864,-36.245,46.909,-2.42,0.23576,23.89,6.1755,
////////-0.018297,0.025518,0.010686,0.0031774,-0.019667,-0.047677,-0.01977,0.0024882,0.0071593,-0.032059,-0.1383,-0.040188,-0.22602,0.10496,0.008555,-0.008957,0.020529,-0.022409,
////////-0.025851,-0.021325,0.0085122,-0.0025249,-0.026113,0.05522,0.0026556,-0.021985,0.0029047,0.047648,-0.15944,0.019927,0.066317,-0.26325,0.0066434,-0.014005,-0.029128,0.012896,
////////-0.34359,0.19797,-0.080612,0.0056959,-0.38317,-0.19108,-0.0052184,-0.0014629,0.0606,-0.23425,-1.7667,-0.04667,-1.1823,-0.75149,-0.016517,-0.28349,0.11311,-0.11349,
////////0.38033,-0.31919,0.28212,-0.027305,0.36175,0.26817,-0.03096,-0.03652,0.19613,0.32141,0.95531,0.070303,1.2059,0.50231,0.10976,0.30564,-0.27751,0.10655;

////////K3 << -1.3656,-13.293,-5.0495,4.5444,-1.2568,12.201,0.84454,-0.11891,-4.8993,25.834,27.288,-9.9483,36.75,-35.116,-2.0854,0.19534,-18.535,-6.2426,
////////-0.70589,14.551,-1.7775,-4.525,1.3469,-15,-0.1847,0.87615,-2.4846,-28.419,7.2217,9.7968,-36.987,43.077,-1.5453,-1.5911,20.486,5.9824,
////////-0.033805,0.031223,0.012572,0.0030999,-0.01817,-0.056296,-0.019086,0.0023571,0.010976,-0.03118,-0.2666,-0.034949,-0.29273,0.1016,0.011023,-0.020087,0.041596,-0.018987,
////////-0.040947,-0.011547,0.0099819,-0.0022049,-0.025637,0.060251,0.0027594,-0.022486,0.0043397,0.045757,-0.25669,0.015641,0.012964,-0.29855,0.010404,-0.027644,-0.018608,0.007464,
////////-0.30557,0.244,-0.013705,0.0070127,-0.4553,-0.21089,-0.0075902,-0.0027198,0.2111,-0.21864,-2.2684,-0.023547,-1.2478,-0.71756,0.055812,-0.26557,0.1743,-0.088331,
////////0.36392,-0.41395,0.21807,-0.032042,0.42431,0.37033,-0.027843,-0.037012,0.027007,0.34644,1.1055,0.059019,1.4321,0.30984,0.03737,0.30762,-0.40806,0.095571;

////////K4 << -1.344,-10.94,-4.8363,4.8547,-2.0445,12.609,0.96919,-0.36226,-4.0545,25.34,30.397,-15.992,30.641,-38.33,-1.6158,-1.1801,-19.053,-10.052,
////////-0.2247,12.823,-1.6773,-4.7896,2.2042,-16.808,-0.32962,1.1446,-2.3722,-28.441,12.439,15.564,-33.218,48.886,-1.8623,-0.11865,21.814,9.5094,
////////-0.040573,0.029577,0.0098127,0.0022755,-0.0094559,-0.062856,-0.016576,0.0040639,0.016385,-0.028356,-0.28774,-0.033479,-0.25555,0.13757,0.011477,-0.024533,0.049786,-0.016509,
////////-0.048667,-0.0034604,0.0055188,-0.0012798,-0.018436,0.051712,0.0036571,-0.020626,0.0052424,0.030207,-0.21911,0.014449,0.031797,-0.25987,0.0083708,-0.030687,-0.0028381,0.010636,
////////-0.21727,0.27212,0.042844,0.0062996,-0.44127,-0.24063,-0.0053463,-0.00027602,0.34499,-0.20304,-2.9257,-0.014338,-1.1146,-0.42727,0.11246,-0.20496,0.21887,-0.069219,
////////0.26005,-0.48911,0.15344,-0.03476,0.392,0.50817,-0.030271,-0.043171,-0.14116,0.37935,1.4253,0.069877,1.4168,-0.21104,-0.020062,0.24356,-0.52756,0.090086;

////////K5 << -0.22184,-9.8882,-4.5676,5.3054,-2.1134,12.967,1.1938,-0.59254,-3.4786,25.511,37.033,-20.923,30.224,-38.467,-1.545,-0.17158,-19.378,-12.281,
////////-0.56856,12.115,-1.4199,-5.2212,2.3555,-18.117,-0.55474,1.3892,-2.0328,-28.812,9.4677,20.365,-34.178,50.577,-1.6458,-0.81455,22.755,11.584,
////////-0.039585,0.029398,0.0082502,0.0011592,-0.0059887,-0.060741,-0.013927,0.004219,0.022153,-0.019175,-0.33121,-0.032556,-0.22155,0.14253,0.012824,-0.025457,0.047723,-0.019344,
////////-0.046487,0.0075573,0.0033036,-0.00017121,-0.014251,0.032225,0.0033472,-0.018456,0.0101,0.010943,-0.21678,0.012597,0.010175,-0.19312,0.0083714,-0.032605,0.014164,0.010947,
////////-0.12904,0.29029,0.0788,0.0028788,-0.38624,-0.24116,0.0043198,0.0026077,0.42613,-0.16041,-3.7356,-0.021648,-0.93835,-0.19778,0.17358,-0.14945,0.2552,-0.068999,
////////0.13896,-0.53591,0.098024,-0.033027,0.32645,0.5874,-0.040388,-0.04827,-0.25727,0.35851,2.1192,0.085944,1.3253,-0.59318,-0.0883,0.17418,-0.61482,0.099617;

////////K6 << 0.90277,-8.832,-4.3093,5.9005,-1.8616,11.86,1.2859,-0.64817,-3.4636,23.75,44.398,-23.669,28.086,-33.659,-1.7988,0.52332,-16.803,-12.366,
////////-1.1462,11.196,-1.2951,-5.8421,2.1651,-17.501,-0.63775,1.447,-1.5783,-27.076,4.1754,23.209,-32.556,46.457,-1.1804,-1.1848,20.582,11.691,
////////-0.036411,0.02933,0.0083137,1.0835e-05,-0.0064108,-0.056304,-0.011728,0.0034829,0.025787,-0.0093881,-0.38543,-0.034938,-0.19862,0.13163,0.013658,-0.022249,0.041567,-0.024832,
////////-0.047315,0.01559,0.0038717,0.00053858,-0.014025,0.017396,0.0028021,-0.01749,0.016568,-0.001621,-0.27607,0.014246,-0.015053,-0.161,0.01108,-0.036858,0.028022,0.01197,
////////-0.085177,0.28938,0.097933,-0.0019526,-0.34922,-0.20514,0.015041,0.0012841,0.45431,-0.099038,-4.4344,-0.028463,-0.79242,-0.17321,0.20881,-0.10789,0.27005,-0.075395,
////////0.072382,-0.54959,0.063398,-0.026545,0.28481,0.59664,-0.051732,-0.047442,-0.30274,0.30491,2.7835,0.087164,1.2204,-0.68754,-0.12898,0.11871,-0.65951,0.1068;


///versao 1 que funciona!
//K111 << 2.4446,-14.299,-4.7199,5.1521,2.0571,3.5696,0.1694,0.87527,-5.1921,39.134,23.664,-13.442,10.978,2.4117,-1.2083,0.46397,-18.379,-6.5523,
//-1.5834,14.475,-2.8136,-5.1987,-0.26349,-4.5143,0.57716,-0.12826,-3.944,-40.296,1.758,12.692,-6.1348,3.2684,-2.0717,-0.10334,19.285,6.6451,
//-0.039063,0.019896,0.018273,0.0044093,-0.047496,-0.04802,-0.022683,-4.977e-05,0.020479,-0.031763,-0.29073,-0.043247,-0.32933,0.01814,0.011184,-0.017336,0.018095,-0.017546,
//-0.041368,-0.023864,0.0094953,-0.0038955,-0.05162,0.061004,2.7663e-05,-0.023563,0.0067196,0.044257,-0.28031,0.049814,0.023962,-0.377,0.0064513,-0.017135,-0.017467,0.023717,
//-0.44527,0.1092,-0.41522,-0.0045981,-0.65414,-0.075321,-0.010836,-0.01293,-0.50356,-0.22322,-2.1845,0.030453,-1.4259,-1.4541,-0.23275,-0.26135,0.072532,-0.036497,
//0.40105,-0.20346,0.62522,-0.015777,0.58723,0.11418,-0.025718,-0.023896,0.7675,0.27554,1.418,-0.0030694,1.3577,1.3081,0.2984,0.23812,-0.21999,0.013881;


//K112 << 3.37,-13.881,-4.9284,5.3216,1.4215,4.1697,0.19255,0.71067,-6.4187,40.778,25.689,-13.592,11.528,-3.3378,-1.5656,1.3992,-18.054,-6.6039,
//-4.2009,12.693,-2.4886,-5.466,-1.1163,-3.3015,0.54247,-0.036782,-2.3038,-39.66,-10.103,14.722,-6.4453,3.2265,-1.4806,-1.9733,17.998,7.5269,
//-0.039995,0.021349,0.018272,0.0029243,-0.047471,-0.048625,-0.022826,-0.00010381,0.019791,-0.041899,-0.29207,-0.039773,-0.32817,0.012108,0.01089,-0.01809,0.023673,-0.016013,
//-0.041198,-0.033769,0.026617,0.0033745,-0.051285,0.065674,0.0002002,-0.023326,0.02828,0.085467,-0.32938,0.040329,0.038135,-0.37822,0.013838,-0.018494,-0.029762,0.017685,
//-0.42812,0.088031,-0.342,0.036755,-0.62733,-0.10582,-0.011446,-0.011329,-0.43776,-0.034654,-2.3793,-0.066833,-1.4475,-1.2184,-0.213,-0.24797,0.00083368,-0.06559,
//0.44552,-0.13169,0.54459,-0.05361,0.61605,0.078496,-0.024651,-0.022916,0.68204,0.0052955,1.9784,0.026734,1.3704,1.2905,0.26904,0.25966,-0.11316,0.013868;

//K121 << 0.13624,-12.164,-4.6884,5.555,1.1006,1.5727,0.17102,0.92008,-4.254,38.081,13.202,-14.736,9.3341,4.902,-0.81331,-1.1157,-16.308,-7.5566,
//-0.74969,13.971,-2.3878,-5.5652,-0.59366,-4.2307,0.50973,-0.17847,-4.0437,-42.179,2.2789,13.045,-9.3755,1.8988,-2.1872,0.71751,18.836,7.1463,
//-0.039818,0.029591,0.03434,-0.0019126,-0.047823,-0.051239,-0.02253,0.0001226,0.040227,-0.068501,-0.33679,-0.033429,-0.33086,0.029912,0.016996,-0.017456,0.028076,-0.013524,
//-0.043249,-0.026838,0.0085355,-0.0019352,-0.053258,0.062355,2.7349e-05,-0.023879,0.0053587,0.056892,-0.29181,0.046478,0.017631,-0.38499,0.0061366,-0.017995,-0.020695,0.022769,
//-0.43865,0.15769,-0.32819,-0.04814,-0.63132,-0.060634,-0.0092659,-0.013696,-0.40907,-0.46179,-2.4679,0.08745,-1.267,-1.4443,-0.20193,-0.26346,0.11303,-0.034939,
//0.45213,-0.31515,0.51552,0.027847,0.6128,0.16535,-0.024847,-0.022921,0.63387,0.63215,2.0922,-0.025676,1.389,1.2526,0.25425,0.27057,-0.32348,0.03032;

//K122 << 1.3809,-11.312,-5.2451,5.6802,0.7867,1.8716,0.21829,0.81306,-5.9377,38.737,18.246,-14.975,10.583,0.39669,-1.3701,-0.11511,-15.711,-7.8051,
//-3.6141,11.765,-1.7922,-5.7871,-1.6424,-2.7918,0.45485,-0.1388,-2.116,-40.478,-11.885,14.977,-10.345,0.7845,-1.4477,-1.215,17.216,8.2164,
//-0.039736,0.031328,0.033776,-0.0030997,-0.046198,-0.053918,-0.022736,0.00027769,0.038873,-0.079508,-0.33124,-0.033323,-0.33274,0.035174,0.016545,-0.017957,0.031842,-0.0135,
//-0.041586,-0.038737,0.024325,0.0058288,-0.051403,0.069533,0.00043349,-0.023665,0.025154,0.10553,-0.32818,0.036923,0.043432,-0.39028,0.012871,-0.018916,-0.035506,0.016745,
//-0.40268,0.12935,-0.26414,-0.0061734,-0.59563,-0.086376,-0.0088795,-0.011869,-0.34876,-0.26358,-2.5625,-0.0009016,-1.2258,-1.1861,-0.18685,-0.23696,0.048902,-0.068475,
//0.47464,-0.23675,0.44715,-0.01075,0.6267,0.12823,-0.02497,-0.02248,0.56078,0.34923,2.5206,0.0037491,1.3359,1.2022,0.23162,0.27892,-0.22127,0.035937;

//K211 << 0.23556,-5.5852,-5.4198,5.7608,1.0175,-0.015315,0.076951,0.99707,-4.9784,18.185,39.865,-16.518,5.7796,6.6188,-2.2424,0.42698,-8.3947,-8.8771,
//-2.0297,6.6846,-2.8057,-5.7629,0.22997,-2.2731,0.6197,-0.23237,-3.8377,-19.988,12.602,15.993,-2.6496,0.19157,-1.3221,-1.2319,10.649,8.7554,
//-0.031456,0.024237,0.02392,0.0060856,-0.029585,-0.057942,-0.019903,0.0017651,0.02834,-0.016446,-0.38272,-0.057096,-0.30341,0.096981,0.014409,-0.015997,0.026316,-0.025245,
//-0.039387,-0.023569,0.012917,-0.0018578,-0.034807,0.07466,0.0023681,-0.023281,0.0089253,0.067826,-0.27599,0.017024,0.055854,-0.36263,0.011405,-0.020772,-0.031209,0.011543,
//-0.54199,0.15023,-0.2368,0.012095,-0.68456,-0.10419,-0.0038182,-0.0052912,-0.14467,-0.1147,-1.6501,-0.0049606,-1.3796,-1.1931,-0.052534,-0.33429,0.11781,-0.066417,
//0.57843,-0.31861,0.46527,-0.036676,0.60902,0.25493,-0.032204,-0.034451,0.3965,0.22377,0.008756,0.061414,1.431,0.81801,0.13066,0.34809,-0.36225,0.06806;

//K212 << 1.0959,-5.3681,-6.0443,6.121,1.4433,0.68913,0.23265,0.88964,-6.9165,22.33,49.577,-19.545,8.1772,2.573,-2.8419,0.98381,-9.7711,-10.721,
//-4.1049,5.6015,-2.326,-6.2477,-0.97545,-1.3765,0.46285,-0.16644,-1.737,-23.042,-1.1926,19.993,-4.244,0.039838,-0.43682,-2.4782,11.052,11.125,
//-0.034376,0.027654,0.026153,0.0030841,-0.032349,-0.059344,-0.020394,0.0015177,0.029888,-0.033542,-0.41047,-0.047715,-0.317,0.08447,0.01562,-0.019804,0.037787,-0.017659,
//-0.034212,-0.029983,0.027131,0.0049391,-0.036361,0.078828,0.0019469,-0.022887,0.025663,0.077571,-0.36629,0.011731,0.071513,-0.3692,0.017203,-0.019674,-0.034853,0.010587,
//-0.50604,0.14687,-0.20201,0.041546,-0.68226,-0.12472,-0.0043971,-0.0050008,-0.10504,-0.053265,-1.7938,-0.077958,-1.3656,-1.0432,-0.045431,-0.30797,0.074118,-0.091009,
//0.58634,-0.28549,0.43577,-0.059563,0.63686,0.21981,-0.031064,-0.033513,0.35072,0.13964,0.29546,0.093171,1.3958,0.82832,0.1135,0.34823,-0.29266,0.06807;

//K221 << -1.1722,-3.5455,-6.3128,6.4072,0.32811,-2.203,0.12572,0.91183,-5.0336,17.387,39.788,-17.795,7.0455,10.546,-2.4558,-0.108,-5.7162,-9.1025,
//-1.4657,5.849,-1.4956,-6.4731,0.37551,-1.8273,0.53081,-0.13696,-2.9251,-21.1,4.2434,16.78,-7.4773,-0.80005,-0.75808,-1.1674,9.5759,8.7298,
//-0.032644,0.031315,0.037319,-0.00095423,-0.031853,-0.060426,-0.020045,0.0015581,0.045306,-0.029979,-0.49467,-0.04659,-0.31823,0.098414,0.020063,-0.01705,0.033891,-0.02259,
//-0.045671,-0.024652,0.013495,0.001037,-0.036816,0.07281,0.0021743,-0.023402,0.012014,0.08131,-0.30822,0.0042517,0.035966,-0.3677,0.012372,-0.024024,-0.031873,0.0035371,
//-0.49375,0.1569,-0.1727,-0.029693,-0.68578,-0.0623,-0.0044282,-0.0067193,-0.067216,-0.18669,-1.9935,0.09549,-1.2379,-1.2557,-0.023639,-0.31609,0.10498,-0.032397,
//0.5654,-0.37371,0.37819,0.010761,0.63129,0.27972,-0.029957,-0.033346,0.27719,0.36996,0.74251,-0.019988,1.4387,0.76984,0.084269,0.34932,-0.41064,0.044907;

//K222 << -0.71586,-2.7342,-7.0497,6.5315,0.77975,-2.2451,0.17982,0.91585,-6.8871,21.151,48.224,-20.574,6.767,8.6415,-3.2275,0.38415,-6.4412,-11.566,
//-3.0668,4.1232,-0.97011,-6.7494,-0.84241,-0.20164,0.48196,-0.19174,-0.9993,-23.901,-7.2064,20.513,-6.4658,-3.032,0.21939,-2.262,9.2941,11.64,
//-0.03377,0.033772,0.040176,-0.0038109,-0.034429,-0.062803,-0.02058,0.0013724,0.047359,-0.042326,-0.52116,-0.043737,-0.33486,0.094362,0.020952,-0.01953,0.042127,-0.019954,
//-0.038113,-0.030058,0.026024,0.0078486,-0.037869,0.077213,0.0019001,-0.023063,0.025792,0.087473,-0.37002,0.0015588,0.059993,-0.37319,0.016905,-0.021209,-0.035554,0.0042913,
//-0.4687,0.15021,-0.15268,-0.0011761,-0.68154,-0.080402,-0.0049655,-0.0066303,-0.042324,-0.12334,-2.0391,0.034246,-1.2159,-1.0803,-0.013636,-0.29611,0.069184,-0.042174,
//0.57975,-0.33616,0.36507,-0.0094527,0.65633,0.24401,-0.029179,-0.031766,0.24935,0.29096,0.89138,0.0007659,1.3985,0.74706,0.067627,0.35108,-0.347,0.034408;

//K311 << 0.67486,-3.5136,-4.9886,5.786,0.33403,-1.3444,-0.01278,0.99995,-4.509,14.854,51.567,-19.651,2.7367,6.881,-1.9383,1.0313,-7.441,-9.0281,
//-3.2003,5.2626,-2.6873,-5.7782,0.47098,-2.9766,0.61666,-0.23889,-3.2605,-17.728,13.473,18.337,-5.4677,2.905,-1.3447,-2.5935,10.69,8.3657,
//-0.039488,0.022113,0.013456,0.0064299,-0.022172,-0.064787,-0.015989,0.003143,0.028892,-0.0074445,-0.4128,-0.067299,-0.25477,0.13735,0.014952,-0.020574,0.032334,-0.030507,
//-0.059474,-0.0023016,0.0091007,-0.0017488,-0.027765,0.05496,0.0032231,-0.021004,0.013493,0.020601,-0.30004,0.027189,0.027761,-0.30399,0.014501,-0.034997,0.0067038,0.018591,
//-0.36045,0.18777,-0.052625,0.017249,-0.616,-0.16779,-0.0086504,-0.010502,0.18631,-0.080113,-2.7223,-0.095257,-1.179,-0.57418,0.069589,-0.27532,0.11486,-0.11293,
//0.4243,-0.42775,0.26553,-0.04043,0.53604,0.50258,-0.025215,-0.033159,0.024367,0.30308,0.79943,0.18563,1.5426,-0.1416,0.0019735,0.31414,-0.47027,0.13594;

//K312 << 0.36729,-2.4517,-5.488,6.0409,1.034,-1.9189,0.10512,1.0188,-5.5122,15.148,58.605,-20.746,1.0547,6.9057,-2.2458,0.91299,-5.8711,-9.4877,
//-3.9164,3.306,-2.8821,-6.1979,-0.62525,-0.598,0.51354,-0.29038,-2.6982,-17.175,13.665,20.105,-2.2406,-1.2009,-0.92705,-2.9156,8.0476,9.2522,
//-0.046762,0.025569,0.011787,0.0040232,-0.025551,-0.069597,-0.016767,0.0030132,0.028511,-0.020591,-0.42849,-0.056827,-0.27185,0.13598,0.014826,-0.02552,0.043371,-0.025805,
//-0.047017,-0.0078012,0.017955,0.0045222,-0.028508,0.057392,0.0025263,-0.020129,0.024113,0.034653,-0.34645,0.013485,0.048336,-0.29425,0.017533,-0.027247,-0.0076999,0.012151,
//-0.34888,0.18653,-0.069097,0.040594,-0.63854,-0.21253,-0.015145,-0.0093024,0.17546,-0.0733,-2.5465,-0.15841,-1.2346,-0.412,0.056906,-0.25429,0.10469,-0.13452,
//0.45007,-0.39931,0.31295,-0.053328,0.57174,0.49435,-0.01857,-0.034009,0.057026,0.28425,0.32106,0.21667,1.5568,-0.17949,0.014573,0.31083,-0.43321,0.13868;


//K321 << 1.3787,-1.8318,-5.4888,6.3194,-0.11193,-4.0574,-0.053277,0.97406,-4.0636,14.831,49.881,-21.833,2.5648,13.346,-1.9191,1.1418,-6.3166,-10.487,
//-4.0628,4.2105,-1.8052,-6.449,0.75752,-1.5947,0.65078,-0.20181,-2.9614,-19.139,8.0292,20.294,-7.2113,-0.85397,-1.0962,-2.825,10.746,9.6533,
//-0.034106,0.025896,0.02225,0.0023231,-0.02392,-0.064304,-0.016028,0.0026501,0.041723,-0.013085,-0.50563,-0.055932,-0.24811,0.13567,0.018874,-0.019276,0.033761,-0.02865,
//-0.062928,-0.0030819,0.009177,0.0012579,-0.029706,0.05145,0.0027963,-0.021058,0.016901,0.023343,-0.30729,0.018629,0.017865,-0.3013,0.015799,-0.036781,0.0071062,0.015656,
//-0.31464,0.19057,-0.028737,-0.0098508,-0.62533,-0.11778,-0.0097936,-0.014334,0.2203,-0.12292,-2.8207,0.01692,-1.0488,-0.66395,0.090618,-0.25733,0.084293,-0.072863,
//0.38174,-0.45543,0.21828,-0.0045462,0.55279,0.49902,-0.023702,-0.029522,-0.049521,0.40405,1.2755,0.076559,1.4816,-0.14894,-0.034173,0.30105,-0.48085,0.1017;


//K322 << 0.86921,-0.7872,-6.0649,6.6268,0.42193,-5.0563,-0.047871,1.0593,-4.7443,16.177,56.617,-24.901,-0.21445,14.024,-2.2437,1.2524,-4.8436,-11.912,
//-4.6461,2.2446,-2.0951,-6.9457,-0.14372,1.1542,0.6617,-0.32623,-2.8839,-19.501,10.424,23.766,-2.9291,-5.5786,-0.72597,-3.3768,8.2805,11.424,
//-0.042824,0.029221,0.023077,-0.0020897,-0.027897,-0.0684,-0.016793,0.0023864,0.043423,-0.032314,-0.55095,-0.039356,-0.26979,0.13396,0.019723,-0.024982,0.047347,-0.020006,
//-0.051331,-0.0073988,0.017016,0.0078465,-0.030471,0.053843,0.0022482,-0.020337,0.025743,0.039534,-0.3457,0.004775,0.039596,-0.29311,0.018198,-0.029495,-0.0073306,0.0089142,
//-0.33344,0.19279,-0.044314,0.0070261,-0.65505,-0.1671,-0.016687,-0.01436,0.2057,-0.14426,-2.7421,-0.032038,-1.1355,-0.49589,0.08564,-0.24676,0.10161,-0.079539,
//0.43994,-0.42992,0.2685,-0.0089633,0.59483,0.49755,-0.016813,-0.028761,-0.0093133,0.41095,0.86383,0.10004,1.5339,-0.19662,-0.02673,0.30764,-0.47512,0.090749;


K111 << 2.1085,-12.341,-4.6982,5.4221,1.9232,2.2716,-0.072353,0.9325,-4.9896,42.188,22.231,-14.841,6.7218,4.2791,-1.1278,0.27584,-15.647,-6.4327,
-0.20924,12.733,-3.8283,-5.4682,0.90518,-3.0666,0.8637,-0.15062,-4.6776,-43.815,12.021,14.546,0.74892,3.0519,-2.2472,0.556,16.776,6.701,
-0.044072,0.020466,0.02768,0.005744,-0.059205,-0.056361,-0.022946,-0.0006434,0.025295,-0.037139,-0.35757,-0.052763,-0.3582,0.0091697,0.012175,-0.016307,0.019698,-0.018186,
-0.046845,-0.025632,0.01853,-0.0034348,-0.064568,0.068928,-0.00074741,-0.023852,0.010943,0.054267,-0.33655,0.054726,0.016891,-0.40083,0.0089727,-0.015174,-0.017368,0.024717,
-0.74334,0.075082,-0.41295,-0.0092737,-1.0148,0.019494,-0.012634,-0.017875,-0.56849,-0.12044,-3.5508,0.090401,-1.5736,-1.8829,-0.23524,-0.31179,0.043307,-0.011413,
0.65429,-0.18522,0.64779,-0.012893,0.90567,0.027118,-0.025022,-0.020298,0.84246,0.21088,2.4687,-0.070194,1.432,1.6653,0.30078,0.26749,-0.20414,-0.014394;


K112 << 2.8806,-12.057,-5.625,5.4276,1.6869,2.8941,0.0051431,0.86864,-6.4162,45.101,27.384,-15.245,8.6574,1.2944,-1.6518,0.80307,-15.389,-6.7232,
-2.75,10.861,-2.5948,-5.608,-0.68286,-1.5967,0.77983,-0.15942,-2.9753,-43.512,-3.6121,17.13,-0.56678,0.32897,-1.4893,-0.75003,15.284,7.7439,
-0.042943,0.020619,0.027489,0.0050779,-0.059437,-0.054715,-0.023132,-0.00072629,0.022617,-0.047212,-0.34176,-0.045746,-0.35145,0.00038694,0.01238,-0.015783,0.024364,-0.016267,
-0.047889,-0.0374,0.040186,0.0064278,-0.065858,0.075668,-0.00070556,-0.023562,0.033452,0.10771,-0.4054,0.046078,0.029825,-0.41231,0.016957,-0.016594,-0.031288,0.017874,
-0.75596,0.05679,-0.27296,0.060171,-0.97975,-0.051766,-0.015343,-0.01488,-0.4244,0.1157,-4.0863,-0.0017106,-1.6971,-1.5477,-0.19625,-0.32464,0.012439,-0.031714,
0.72865,-0.10745,0.49692,-0.077192,0.93985,0.019792,-0.022003,-0.020781,0.68988,-0.13922,3.3683,-0.056779,1.5272,1.5523,0.25432,0.30846,-0.12651,-0.018359;

K121 << -0.02136,-10.656,-4.1581,5.7712,0.83628,0.42785,-0.040777,0.97288,-3.9951,41.192,10.392,-16.425,5.7715,6.1173,-0.76496,-0.83857,-13.92,-7.2423,
0.21416,12.893,-3.7379,-5.7827,0.30498,-3.2814,0.74772,-0.19779,-4.8927,-47.276,12.33,15.18,-3.8706,2.4987,-2.3475,0.95181,16.852,7.1357,
-0.045636,0.027764,0.046744,-0.0016698,-0.061169,-0.058933,-0.022692,-0.00058914,0.04593,-0.071026,-0.41659,-0.044449,-0.36058,0.016882,0.01867,-0.016596,0.026809,-0.014643,
-0.04758,-0.025264,0.019528,-0.0023643,-0.066987,0.066608,-0.00094255,-0.023868,0.010374,0.060293,-0.34609,0.052154,-3.899e-05,-0.39891,0.0090626,-0.014995,-0.017893,0.024708,
-0.768,0.13081,-0.28358,-0.073556,-1.0022,0.034973,-0.014007,-0.019174,-0.42465,-0.38814,-4.1435,0.11551,-1.4502,-1.9098,-0.18985,-0.33201,0.087755,-0.022322,
0.74378,-0.3122,0.48791,0.052215,0.95671,0.092239,-0.020551,-0.018892,0.66233,0.65558,3.5082,-0.059048,1.5287,1.635,0.24285,0.31517,-0.31688,0.010651;

K122 << 0.73437,-9.8125,-5.3935,5.8136,0.61731,0.59977,-0.0089844,0.93741,-5.8194,43.563,16.209,-16.734,6.6958,3.8125,-1.4446,-0.45786,-13.261,-7.5497,
-2.4921,10.576,-2.2382,-5.9535,-1.3626,-1.4527,0.70131,-0.24268,-2.8617,-46.477,-4.8492,17.422,-4.576,-1.1763,-1.4919,-0.37277,14.998,8.1285,
-0.043949,0.028995,0.046525,-0.0019134,-0.059171,-0.060137,-0.0229,-0.00051596,0.043562,-0.08259,-0.40086,-0.043114,-0.35662,0.018843,0.018344,-0.01612,0.029582,-0.0149,
-0.04772,-0.039278,0.040312,0.0079211,-0.066233,0.075908,-0.00074477,-0.02363,0.032035,0.12341,-0.40611,0.042142,0.025578,-0.41265,0.016614,-0.016372,-0.03373,0.017319,
-0.75408,0.099589,-0.13003,-0.0039571,-0.94523,-0.0094354,-0.013449,-0.016896,-0.26232,-0.12552,-4.5951,0.048192,-1.4328,-1.5739,-0.14426,-0.33129,0.049326,-0.035787,
0.7989,-0.22675,0.32518,-0.012449,0.96955,0.063257,-0.020459,-0.018441,0.49398,0.28325,4.3557,-0.059621,1.4981,1.5271,0.1914,0.3488,-0.23394,0.0022298;


K211 << 0.81804,-5.2359,-5.6695,5.9658,0.76751,-0.054371,-0.0029427,1.0393,-4.8481,19.857,42.944,-17.795,5.4608,5.6959,-2.274,0.5394,-7.9785,-8.5631,
-2.2233,6.2892,-3.3344,-5.9247,0.90546,-2.4614,0.70338,-0.25928,-4.651,-22.329,17.286,17.439,-2.9055,1.4471,-1.4505,-1.0159,10.096,8.4355,
-0.035577,0.024605,0.024875,0.0057616,-0.03041,-0.062399,-0.01879,0.001453,0.025846,-0.019424,-0.39989,-0.058584,-0.3003,0.096033,0.01208,-0.01325,0.028607,-0.021598,
-0.046689,-0.022931,0.018379,-0.0011848,-0.037658,0.077461,0.0021794,-0.023064,0.0067396,0.0722,-0.30351,0.013303,0.048954,-0.36565,0.010577,-0.017384,-0.030368,0.011181,
-0.81884,0.11519,-0.14844,0.0083493,-0.9211,-0.038642,-0.009332,-0.011891,-0.14803,-0.013363,-3.069,-0.030288,-1.3599,-1.3555,-0.032051,-0.37655,0.097232,-0.059481,
0.82516,-0.29349,0.39894,-0.037941,0.81845,0.22542,-0.02715,-0.029213,0.41696,0.17,1.1535,0.091005,1.4485,0.94939,0.115,0.37016,-0.35166,0.061763;


K212 << 1.5602,-5.057,-6.5109,6.4051,1.3621,0.9275,0.18536,0.96776,-6.8036,27.01,54.315,-22.149,7.3149,2.6555,-2.7321,1.1268,-9.3012,-10.658,
-4.2762,5.2393,-2.5629,-6.5536,-0.73735,-1.5876,0.50988,-0.23877,-2.6874,-28.525,0.90902,23.082,-3.7204,0.10405,-0.78013,-2.2293,10.246,11.18,
-0.038227,0.027302,0.025135,0.0038741,-0.033171,-0.064551,-0.019427,0.0014193,0.023751,-0.036239,-0.41138,-0.048476,-0.31195,0.088328,0.012388,-0.015767,0.038594,-0.015513,
-0.040981,-0.02823,0.036105,0.0069392,-0.039703,0.082275,0.0016678,-0.022544,0.025023,0.082625,-0.41307,0.011564,0.070302,-0.37124,0.017196,-0.016668,-0.033751,0.011543,
-0.78169,0.097406,-0.069165,0.059174,-0.91267,-0.061218,-0.010411,-0.010117,-0.056684,0.082028,-3.5862,-0.14207,-1.3731,-1.1783,-0.0084001,-0.36486,0.069781,-0.096981,
0.8369,-0.24887,0.32938,-0.077444,0.84925,0.18671,-0.025237,-0.029641,0.33221,0.069967,1.7936,0.14197,1.4305,0.93366,0.085278,0.38245,-0.29133,0.067756;

K221 << -0.68005,-3.296,-5.817,6.385,-0.6556,-2.562,-0.12364,0.94328,-4.0673,20.404,32.388,-20.326,3.1884,9.0358,-2.0668,-0.19152,-5.9955,-9.5377,
-1.702,5.4383,-2.8246,-6.3927,1.5728,-1.8215,0.78445,-0.16669,-4.7091,-24.709,18.288,19.138,-4.2194,1.0947,-1.3839,-0.7687,9.5453,9.0163,
-0.036766,0.030595,0.039202,-0.0023542,-0.032897,-0.063596,-0.018835,0.0012251,0.041898,-0.031056,-0.52101,-0.050487,-0.31218,0.096862,0.017692,-0.01482,0.034938,-0.019603,
-0.052325,-0.023323,0.018089,0.0016297,-0.040164,0.075446,0.0020529,-0.023328,0.007688,0.08448,-0.32416,0.00017925,0.030181,-0.36827,0.010747,-0.019809,-0.02989,0.0050864,
-0.77511,0.12511,-0.063535,-0.052953,-0.92721,0.010651,-0.0089351,-0.014259,-0.041479,-0.12412,-3.6129,0.092451,-1.2567,-1.4119,0.0034741,-0.3653,0.09166,-0.023001,
0.81921,-0.34708,0.29191,0.02952,0.8539,0.24651,-0.025986,-0.026589,0.27469,0.35216,2.1336,-0.0013547,1.4909,0.89335,0.065291,0.37772,-0.39945,0.039431;


K222 << 0.15884,-2.7453,-6.6656,6.7439,0.035066,-2.2707,0.040176,0.95485,-5.8915,25.425,44.548,-22.887,4.127,8.6059,-2.7531,0.58621,-6.2954,-11.493,
-3.7415,3.9782,-2.1629,-6.9551,-0.10132,-0.31774,0.61563,-0.23187,-3.0441,-28.967,3.0803,22.895,-4.076,-2.6339,-0.56109,-2.0736,8.682,11.521,
-0.039187,0.0322,0.039903,-0.0040428,-0.035526,-0.067305,-0.019526,0.0011535,0.040618,-0.042374,-0.53576,-0.049885,-0.32647,0.097269,0.017642,-0.016542,0.043053,-0.018693,
-0.045228,-0.028147,0.033944,0.010356,-0.041575,0.080683,0.0016921,-0.022876,0.023117,0.095389,-0.40729,-0.0015301,0.057885,-0.37444,0.016248,-0.017903,-0.03399,0.0058075,
-0.74186,0.10275,-0.0053578,0.0037299,-0.91182,-0.0045428,-0.0099737,-0.013148,0.033144,-0.017668,-3.9723,-0.024088,-1.2249,-1.213,0.023477,-0.35456,0.061375,-0.054303,
0.831,-0.29712,0.24599,-0.013947,0.87492,0.20485,-0.024214,-0.026106,0.21184,0.25071,2.5567,0.059378,1.4288,0.84276,0.041892,0.38627,-0.33584,0.044284;


K311 << 1.7654,-3.4295,-5.2335,5.9109,0.35613,-2.384,-0.25283,1.1896,-4.3053,13.971,58.572,-19.284,1.5032,10.232,-2.3696,1.4396,-6.7922,-7.8021,
-3.709,4.9411,-2.9493,-5.8597,0.99759,-2.0225,0.82782,-0.42662,-4.1044,-16.984,17.776,18.28,-4.1421,-0.12542,-1.0538,-2.5714,9.8198,7.0666,
-0.050763,0.020492,0.016256,0.0064312,-0.025754,-0.066854,-0.01559,0.0025345,0.021716,-0.0096413,-0.4625,-0.071194,-0.26369,0.12082,0.011241,-0.020628,0.034517,-0.027742,
-0.073294,-0.0058737,0.012408,0.002648,-0.032383,0.056415,0.0026726,-0.021219,0.00065869,0.034821,-0.30505,0.011247,0.020929,-0.31873,0.010295,-0.029654,0.00017775,0.011872,
-0.64777,0.16184,0.010462,0.036738,-0.74955,-0.13526,-0.023428,-0.022968,0.11528,-0.022129,-3.758,-0.078847,-1.3022,-0.79595,0.065039,-0.34207,0.15512,-0.088152,
0.66852,-0.39927,0.21066,-0.069239,0.64356,0.50811,-0.0093788,-0.021446,0.10677,0.26483,1.5497,0.17173,1.6671,0.071821,0.011016,0.35294,-0.5106,0.11582;


K312 << 1.14,-2.9702,-5.7934,6.2016,0.82758,-1.6853,-0.039398,1.0427,-5.5373,17.825,67.347,-22.582,1.587,6.2848,-2.5597,1.4382,-6.5026,-9.5333,
-4.2083,3.7095,-3.1334,-6.3689,0.021279,-0.79513,0.62387,-0.31996,-3.3599,-20.164,17.079,22.324,-2.9493,-0.18667,-0.8196,-3.0105,8.4273,9.4288,
-0.05937,0.021717,0.014212,0.0053391,-0.028153,-0.071723,-0.016436,0.0025818,0.020013,-0.021607,-0.46327,-0.065065,-0.27889,0.11988,0.010819,-0.02507,0.04495,-0.026158,
-0.060158,-0.0086612,0.024942,0.0082804,-0.031505,0.057299,0.0019852,-0.019964,0.016404,0.040161,-0.39331,0.0072245,0.038148,-0.30361,0.014892,-0.024519,-0.0075669,0.010304,
-0.5942,0.1488,0.034645,0.073922,-0.76287,-0.1925,-0.031677,-0.019353,0.1639,-0.008072,-3.9665,-0.18814,-1.3582,-0.58665,0.067236,-0.31695,0.13233,-0.12156,
0.65735,-0.36681,0.22941,-0.089793,0.67102,0.51477,-0.00089861,-0.024813,0.088703,0.2636,1.3228,0.23518,1.693,-0.024872,0.012512,0.34569,-0.462,0.1196;


K321 << 2.5262,-1.5662,-5.4492,6.4112,-0.37651,-4.7397,-0.34494,1.1071,-3.0598,15.541,49.821,-22.481,0.42479,14.803,-1.8134,1.1468,-6.394,-9.8704,
-4.5589,3.8639,-2.2753,-6.4853,1.3753,-1.3015,0.91364,-0.34825,-4.3676,-20.455,17.272,21.338,-4.8884,-1.9965,-1.335,-2.4933,10.722,9.0039,
-0.048473,0.024465,0.029435,-0.00030758,-0.028817,-0.065748,-0.015785,0.0017233,0.03674,-0.020881,-0.61111,-0.053923,-0.26014,0.11314,0.016105,-0.021774,0.040571,-0.023781,
-0.078224,-0.0048022,0.013552,0.0046233,-0.035546,0.04959,0.0019867,-0.021458,0.0026856,0.033963,-0.33552,0.0031157,0.0076827,-0.31216,0.0099948,-0.032177,0.0045705,0.0084195,
-0.60869,0.17295,0.099738,-0.014601,-0.77228,-0.088144,-0.025451,-0.029386,0.22148,-0.10988,-4.671,0.065429,-1.2246,-0.90646,0.11049,-0.33457,0.16133,-0.028843,
0.63529,-0.44212,0.091037,-0.0068882,0.68234,0.51784,-0.0067843,-0.014368,-0.049769,0.43326,2.9831,0.02125,1.6558,0.090496,-0.050754,0.35427,-0.56477,0.057895;


K322 << 0.94007,-1.2195,-5.8285,6.7961,-0.1564,-4.2443,-0.21312,0.97025,-3.8395,19.588,54.214,-26.053,-0.26258,9.2215,-1.9748,0.85871,-4.6974,-11.319,
-4.2229,2.7161,-2.8009,-7.1607,0.67144,0.073604,0.78779,-0.25323,-4.3146,-23.577,21.924,25.124,-3.1411,-0.30537,-1.2019,-2.6389,7.9954,10.918,
-0.057043,0.025146,0.027959,-0.0023326,-0.031898,-0.07087,-0.01671,0.0016334,0.035862,-0.035724,-0.61984,-0.048569,-0.27701,0.11551,0.016017,-0.025569,0.049853,-0.022422,
-0.065807,-0.0069018,0.024728,0.010063,-0.034346,0.051209,0.0013675,-0.020239,0.016641,0.039799,-0.40801,0.00035749,0.024207,-0.29737,0.014837,-0.027175,-0.0046466,0.0064343,
-0.5642,0.16205,0.10959,0.015493,-0.78689,-0.14684,-0.033938,-0.02724,0.25668,-0.11477,-4.7622,-0.03805,-1.2778,-0.68593,0.10814,-0.31358,0.14905,-0.053379,
0.63799,-0.4115,0.1271,-0.013711,0.71012,0.53109,0.0021154,-0.016234,-0.047734,0.45178,2.6456,0.091585,1.6957,-0.031053,-0.042355,0.35167,-0.53229,0.057043;

}
		
	public: ~vant3_adaptiveMixCtrl()
	{
	
	}
		
	public: void config()
	{
			
	}
	

	private: Double322  BumpFunction3dim(double Ub, double Ar, double Al, double DivUb[3][2], double DivAr[2][2], double DivAl[2][2],
								 	 double CenterUb[3], double CenterAr[2], double CenterAl[2], double CutOffUb[3], double CutOffAr[2], double CutOffAl[2])
	{
		
		double BumpSetsUb[3];
		double BumpSetsAr[2];
		double BumpSetsAl[2];

 		BumpSetsUb[0] = xii(Ub, CenterUb[0],CutOffUb[0]);
 		BumpSetsUb[1] = xii(Ub, CenterUb[1],CutOffUb[1]);
 		BumpSetsUb[2] = xii(Ub, CenterUb[2],CutOffUb[2]);

 		BumpSetsAr[0] = xii(Ar, CenterAr[0],CutOffAr[0]);
 		BumpSetsAr[1] = xii(Ar, CenterAr[1],CutOffAr[1]);

 		BumpSetsAl[0] = xii(Al, CenterAl[0],CutOffAl[0]);
 		BumpSetsAl[1] = xii(Al, CenterAl[1],CutOffAl[1]);


		double sum = 0;
		double Bump[3][2][2];
		for(int i=0; i<=2; i++){
			for(int j=0; j<=1; j++){
				for(int k=0; k<=1; k++){
					Bump[i][j][k] = BumpSetsUb[i]*BumpSetsAr[j]*BumpSetsAl[k];
					sum+= Bump[i][j][k];
				}
			}
		}
	
		Double322 n;
		for(int i=0; i<=2; i++){
			for(int j=0; j<=1; j++){
				for(int k=0; k<=1; k++){
					n.Val[i][j][k] = Bump[i][j][k]/sum;
				}
			}
		}

		return n;
	}

	private: double xii(double u, double center, double cutoff)
	{
		double w = ( u - center ) / cutoff;
		
		if(abs(w) < 1){
			return pow(e, ( -1.0 / ( 1.0 - pow(w,2.0) )));	
		}
		else{
			return 0.0;	
		}
	}


	private: Eigen::VectorXd TrajetoriaReferenciaCompleta(double Tempo)
	{
		Eigen::VectorXd Traj(20);
		Tempo = Tempo/1.2;
		//complete trajectory
		double X,Y,Z,Xp,Yp,Zp,Phi,Theta,Psi,Phip,Thetap,Psip, Ar, Al, Arp, Alp;
		Theta = -0.065;
		Thetap = 0.0;
		Phi = 0.0;
		Phip = 0.0;
		Ar =  0.065;
		Arp = 0.0;
		Al =  0.065;
		Alp = 0.0;
		double RT = 144.0;
		double T = 60.3186;
		//std::cout << Tempo << std::endl;
		if(Tempo < 20)
		{
			X = 0.0;
			Y = 0.0;
			Z = 1+0.5*Tempo;
			Psi = 0.0;
			Xp = 0.0;
			Yp = 0.0;
			Zp = 0.5;
			Psip = 0.0;
		}
		else if(Tempo >= 20.0 && Tempo < 20.0 + 19.2)
		{
			Tempo = Tempo - 20.0;    
			X = (0.7813/2)*pow(Tempo,2.0);
			Y = 0.0;
			Z = 11.0;
			Psi = 0.0;
			Xp = (0.7813)*Tempo;
			Yp = 0.0;
			Zp = 0.0;
			Psip = 0.0;    
		}
		else if((Tempo >= 20.0 + 19.2) && (Tempo < 20.0 + 19.2 + 45.2389))
		{		
			Tempo = Tempo - 20.0 - 19.2;

			X = RT*cos(((15.0/144.0)*Tempo)-(pi/2.0)) + RT;
			Y = RT*sin(((15.0/144.0)*Tempo)-(pi/2.0)) + RT;
			Z = 11 + 2*sin((2*pi/22.6195)*Tempo);
			Psi = (Tempo / 45.2389) * (3.0/4.0)*2.0*pi;
			Xp = -(5*RT*sin((5.0*Tempo)/48.0 - pi/2.0))/48.0;
			Yp = (5*RT*cos((5.0*Tempo)/48.0 - pi/2.0))/48.0;
			Zp = (8000.0*pi*cos((4000.0*pi*Tempo)/45239.0))/45239.0;
			Psip = (1.0 / 45.2389) * (3.0/4.0)*2.0*pi;
			//std::cout << "Entrei1" << std::endl;
		}
		else if(Tempo >= 20.0 + 19.2 + 45.2389 && Tempo < 20.0 + 19.2 + 45.2389 + 19.2)
		{
			//std::cout << "Entrei2" << std::endl;
			Tempo = Tempo - 20.0 - 19.2 - 45.2389;    
			X = 0.0;
			Y = RT+(0.7826/2.0)*pow(Tempo,2) - 15.0*Tempo;
			Z = 11.0;
			Psi = (3.0/4.0)*2.0*pi;
			Xp = 0.0;
			Yp = -15.0+(0.7826)*Tempo;
			Zp = 0.0;
			Psip = 0.0;  
		}
		else if(Tempo >= 20.0 + 19.2 + 45.2389 + 19.2 && Tempo <= 20 + 19.2 + 45.2389 + 19.2 + 20.0){
			Tempo = Tempo - (20 + 19.2 + 45.2389 + 19.2);
			X = 0.0;
			Y = 0.0;
			//Z = 11.0;
			Z = 1.0+0.5*(20.0-Tempo);
			Psi = (3.0/4.0)*2.0*pi;
			Xp = 0.0;
			Yp = 0.0;
			Zp = 0.0;
			Psip = 0.0;
		}
		else{
			X = 0.0;
			Y = 0.0;
			//Z = 11.0;
			Z = 1.0;
			Psi = (3.0/4.0)*2.0*pi;
			Xp = 0.0;
			Yp = 0.0;
			Zp = 0.0;
			Psip = 0.0;
		}

//   // just rotate in psi
//		if(Tempo < 40)
//		{
//			X = 0.0;
//			Y = 0.0;
//			Z = 1.0;
//			Psi = -(2*pi)*Tempo/40;
//			Xp = 0.0;
//			Yp = 0.0;
//			Zp = 0.0;
//			Psip = -2*pi/40;
//		}
//		else{  
//			X = 0.0;
//			Y = 0.0;
//			Z = 1.0;
//			Psi = -2*pi;
//			Xp = 0.0;
//			Yp = 0.0;
//			Zp = 0.0;
//			Psip = 0.0;   
//		}



		//Maps to the body
		Eigen::MatrixXd RIB(3,3);
		Eigen::MatrixXd W_n(3,3);
		Eigen::VectorXd XpYpZp(3);
		Eigen::VectorXd PhipThetapPsip(3);
		Eigen::VectorXd UVW(3);
		Eigen::VectorXd PQR(3);

		XpYpZp << Xp, Yp, Zp;
		PhipThetapPsip << Phip, Thetap, Psip;

		RIB <<  (cos(Psi)*cos(Theta)), (cos(Psi)*sin(Phi)*sin(Theta) - cos(Phi)*sin(Psi)), (sin(Phi)*sin(Psi) + cos(Phi)*cos(Psi)*sin(Theta)),
				(cos(Theta)*sin(Psi)), (cos(Phi)*cos(Psi) + sin(Phi)*sin(Psi)*sin(Theta)), (cos(Phi)*sin(Psi)*sin(Theta) - cos(Psi)*sin(Phi)), 
                        (-sin(Theta)),                              (cos(Theta)*sin(Phi)),                              (cos(Phi)*cos(Theta));
		W_n << 1.0,         0.0,          -sin(Theta), 
		       0.0,  cos(Phi),  cos(Theta)*sin(Phi),
               0.0, -sin(Phi),  cos(Phi)*cos(Theta);
		
		UVW = RIB.transpose() * XpYpZp;
		PQR = W_n * PhipThetapPsip;

		Traj << UVW(0), UVW(1), UVW(2),
                PQR(0), PQR(1), PQR(2),
	               Arp,    Alp, 
   		             X,      Y,      Z,
                   Phi,  Theta,    Psi,
					Ar,     Al, 
                   0.0,    0.0,    0.0,     0.0;

		//simple reference
//		Traj << 0,0,0,0,     0,0,     0,      0, //uvwpqr arp alp
//				0,0,1,0,-0.065,0,0.065, 0.065, //xyzphithetapsi ar al
//                0,0,0,0;

		return Traj;
	}

	private: Eigen::VectorXd MakeXref(Eigen::VectorXd Trajectory )
	{
		Eigen::VectorXd xRef(18);
		xRef << Trajectory(0), Trajectory(1), Trajectory(2), Trajectory(3), Trajectory(4), Trajectory(5), // uvw pqr
		Trajectory(6), Trajectory(7), //arp alp
		Trajectory(10), // z
		Trajectory(11),Trajectory(12),Trajectory(13),Trajectory(14), Trajectory(15), // phi theta psi ar al
		Trajectory(16), Trajectory(17), Trajectory(18), Trajectory(19); // integrators
		return xRef;
	}
	
	public: std::vector<double> execute(simulator_msgs::SensorArray arraymsg)
	{
		//read data from sensors
		simulator_msgs::Sensor msg;
		msg = arraymsg.values.at(0);			 			
		//msg: x y z phi theta psi alphar alphal xp yp zp phip thetap psip alpharp alphalp		
		static double PsiAnt = 0;

		//Map inertial velocity to body velocity
		double phi = msg.values.at(3);
		double theta = msg.values.at(4);
		double psi = msg.values.at(5);
		RI_B << (cos(psi)*cos(theta)), (cos(psi)*sin(phi)*sin(theta) - cos(phi)*sin(psi)), (sin(phi)*sin(psi) + cos(phi)*cos(psi)*sin(theta)),
				(cos(theta)*sin(psi)), (cos(phi)*cos(psi) + sin(phi)*sin(psi)*sin(theta)), (cos(phi)*sin(psi)*sin(theta) - cos(psi)*sin(phi)), 
                (-sin(theta)), (cos(theta)*sin(phi)), (cos(phi)*cos(theta));
		
		Eigen::MatrixXd XpYpZp(3,1);
		Eigen::MatrixXd PhipThetapPsip(3,1);
		Eigen::MatrixXd WIIB(3,1);
		Eigen::MatrixXd uvw(3,1);
		Eigen::MatrixXd pqr(3,1);
		XpYpZp << msg.values.at(8), msg.values.at(9), msg.values.at(10);
		WIIB << msg.values.at(11), msg.values.at(12), msg.values.at(13);
		uvw = RI_B.transpose()*XpYpZp;
		pqr = RI_B.transpose()*WIIB;

		//build reference values
		static double Tempo = 0;
		Trajectory = TrajetoriaReferenciaCompleta(Tempo);
		Tempo = Tempo + T;
		Xref =  MakeXref(Trajectory);

		

		// State vector: u v w p q r alpharp alphalp z phi theta psi alphar alphal intz intu intv intpsi
		X << uvw(0), uvw(1), uvw(2),
			 pqr(0), pqr(1), pqr(2),
			 msg.values.at(14),
             msg.values.at(15),
             msg.values.at(2),
             msg.values.at(3),
             msg.values.at(4), 
             msg.values.at(5), 
             msg.values.at(6),
             msg.values.at(7), 
			 0, 0, 0, 0;
		//Deal's with Psi Discontinuity at 180 degree
		if(X(11) - Xref(11) < -pi)
		{
		   X(11) = X(11) +  2*pi;
		}
		else if(X(11) - Xref(11) > pi)
		{
		   X(11) = X(11) - 2*pi;
		}

		//kinematic controller
		//proportional
		Xk << Trajectory(8)-msg.values.at(0), Trajectory(9)-msg.values.at(1), 0; // x-xr, y-yr
		Uk << Trajectory(0), Trajectory(1), Trajectory(2);
		Kk <<  0.8,    0,   0,
                 0,  0.4,   0,
                 0,    0,   1;
		//integral
		Kki <<  0.02,    0,   0,
                  0, 0.01,   0,
                  0,    0, 0.03;
		static double xint, x_ant = 0;
		static double yint, y_ant = 0;

		double x_atual = Trajectory(8)-msg.values.at(0);
		xint = xint + (T/2)*(x_atual + x_ant);
		x_ant = x_atual;

		double y_atual = Trajectory(9)-msg.values.at(1);
		yint = yint + (T/2)*(y_atual + y_ant);
		y_ant = y_atual;

		Xki << xint, yint, 0;

		//kinematic controller  action
		Dk = Kk*RI_B.transpose()*Xk+Kki*RI_B.transpose()*Xki+Uk;
		Xref(0) = Dk(0);
		Xref(1) = Dk(1);
		Xref(2) = Dk(2);

		// Trapez integral intz intu intv intpsi
		static double ubint, ub_ant = 0;
		static double vbint, vb_ant = 0;
		static double zint, z_ant = 0;
		static double yawint, yaw_ant = 0;

		double ub_atual = X(0) - Xref(0);
		ubint = ubint + (T/2)*(ub_atual + ub_ant);
		ub_ant = ub_atual;
		
		double vb_atual = X(1) - Xref(1);
		vbint = vbint + (T/2)*(vb_atual + vb_ant);
		vb_ant = vb_atual;
		
		double z_atual = X(8) - Xref(8);
		zint = zint + (T/2)*(z_atual + z_ant);
		z_ant = z_atual;
		
		double yaw_atual = X(11) - Xref(11);
		yawint = yawint + (T/2)*(yaw_atual + yaw_ant);
		yaw_ant = yaw_atual;

		X(14) = zint;
		X(15) = ubint;
		X(16) = vbint;
		X(17) = yawint;

		//Computing adaptive mixing

		// Split Sets - parameters
	    static double DivUb[3][2] = {{0,   6.0}, {5.5,10.0}, {9.5,14.0} };
    	static double DivAr[2][2] = {{-0.2, 0.05}, {-0.05, 0.2} };
	    static double DivAl[2][2] = {{-0.2,  0.05}, {-0.05,  0.2} };
	 	static double CenterUb[3] = {3, 7.75, 11.75};
	 	static double CenterAr[2] = {-0.0750, 0.0750};
	 	static double CenterAl[2] = {-0.0750, 0.0750};
	 	static double CutOffUb[3] = {3.0, 2.25, 2.25}; 
	 	static double CutOffAr[2] = {0.1250, 0.1250};
	 	static double CutOffAl[2] = {0.1250, 0.1250};
	 	double Ub = uvw(0);
	 	double Ar = msg.values.at(6);
	 	double Al = msg.values.at(7);
		
		// Saturation values
		if(Ub < 0.01)
		{
			Ub = 0.01;
		}
		else if(Ub > 13.99){
			Ub = 13.99;
		}	

		if(Ar < -0.199)
		{
			Ar = -0.199;
		}
		else if(Ar > 0.199){
			Ar = 0.199;
		}

		if(Al < -0.199)
		{
			Al = -0.199;
		}
		else if(Al > 0.199){
			Al = 0.199;
		}

		// performing the adaptive mixing
		Double322 Psi;
        Psi = BumpFunction3dim(Ub,Ar,Al,DivUb,DivAr,DivAl,CenterUb,CenterAr,CenterAl,CutOffUb,CutOffAr,CutOffAl);
		std::cout << std::endl;
		std::cout << Ub << Ar << Al;
		K =    Psi.Val[0][0][0]*K111 +  Psi.Val[0][0][1]*K112 +   Psi.Val[0][1][0]*K121  +  Psi.Val[0][1][1]*K122 +  Psi.Val[1][0][0]*K211 +
               Psi.Val[1][0][1]*K212 +  Psi.Val[1][1][0]*K221 +   Psi.Val[1][1][1]*K222  +  Psi.Val[2][0][0]*K311 +  Psi.Val[2][0][1]*K312 +
               Psi.Val[2][1][0]*K321 +  Psi.Val[2][1][1]*K322;
		std::cout << std::endl << std::endl <<
				     Psi.Val[0][0][0] << std::endl <<  
					 Psi.Val[0][0][1] << std::endl <<
				     Psi.Val[0][1][0] << std::endl <<
					 Psi.Val[0][1][1] << std::endl <<
					 Psi.Val[1][0][0] << std::endl <<
                     Psi.Val[1][0][1] << std::endl <<
					 Psi.Val[1][1][0] << std::endl <<
					 Psi.Val[1][1][1] << std::endl <<
					 Psi.Val[2][0][0] << std::endl <<
					 Psi.Val[2][0][1] << std::endl <<
	                 Psi.Val[2][1][0] << std::endl <<
					 Psi.Val[2][1][1];
	
		//Control law
		Erro = (X-Xref);
		Input = K*Erro + Uref;

		//data to be saved
		SaveData(0) = uvw(0);
		SaveData(1) = uvw(1);
		SaveData(2) = uvw(2);
		SaveData(3) = pqr(0);
		SaveData(4) = pqr(1);
		SaveData(5) = pqr(2);
		SaveData(6) = msg.values.at(14);
		SaveData(7) = msg.values.at(15);
		SaveData(8) = msg.values.at(0);
		SaveData(9) = msg.values.at(1);
		SaveData(10) = msg.values.at(2);
		SaveData(11) = msg.values.at(3);
		SaveData(12) = msg.values.at(4);
		SaveData(13) = X(11);
		SaveData(14) = msg.values.at(6);
		SaveData(15) = msg.values.at(7);
		SaveData(16) = Tempo;

		SaveDataRef(0) = Xref(0);
		SaveDataRef(1) = Xref(1);
		SaveDataRef(2) = Xref(2);
		SaveDataRef(3) = Trajectory(3);
		SaveDataRef(4) = Trajectory(4);
		SaveDataRef(5) = Trajectory(5);
		SaveDataRef(6) = Trajectory(6);
		SaveDataRef(7) = Trajectory(7);
		SaveDataRef(8) = Trajectory(8);
		SaveDataRef(9) = Trajectory(9);
		SaveDataRef(10) = Trajectory(10);
		SaveDataRef(11) = Trajectory(11);
		SaveDataRef(12) = Trajectory(12);
		SaveDataRef(13) = Trajectory(13);
		SaveDataRef(14) = Xref(12);
		SaveDataRef(15) = Xref(13);
		SaveDataRef(16) = Tempo;

		SaveDataError = SaveData - SaveDataRef;

		//apply control inputs
		std::vector<double> out(Input.data(), Input.data() + Input.rows() * Input.cols());
		return out;
	}

	public: std::vector<double> Reference()
	{
		std::vector<double> out(SaveDataRef.data(), SaveDataRef.data() + SaveDataRef.rows() * SaveDataRef.cols());
		return out;
	}

	public: std::vector<double> Error()
	{
		std::vector<double> out(SaveDataError.data(), SaveDataError.data() + SaveDataError.rows() * SaveDataError.cols());
		return out;
	}

	public: std::vector<double> State()
	{
		std::vector<double> out(SaveData.data(), SaveData.data() + SaveData.rows() * SaveData.cols());
		return out;
	}
};


extern "C"
{
	Icontroller *create(void) {return new vant3_adaptiveMixCtrl;}
	void destroy(Icontroller *p) {delete p;}
}
