#include "Icontroller.hpp"
#include <iostream>
#include <Eigen/Eigen>
#include "simulator_msgs/Sensor.h"
#include <cmath>

class vant3_adaptiveMixCtrl : public Icontroller
{
	private: double e;
	private: double NumeroConjuntos; 
	private: double pi;

	//integrators
	private: double T;

	//Mapeamento
	private: Eigen::MatrixXd RI_B;
	private: Eigen::MatrixXd Wn;

	//dynamic controller
	private: Eigen::MatrixXd K;
	private: Eigen::MatrixXd K1;
	private: Eigen::MatrixXd K2;
	private: Eigen::MatrixXd K3;
	private: Eigen::MatrixXd K4;
	private: Eigen::MatrixXd K5;
	private: Eigen::MatrixXd K6;
	private: Eigen::VectorXd Uref;
	private: Eigen::VectorXd Uref1;
	private: Eigen::VectorXd Uref2;
	private: Eigen::VectorXd Uref3;
	private: Eigen::VectorXd Uref4;
	private: Eigen::VectorXd Uref5;
	private: Eigen::VectorXd Uref6;
	private: Eigen::VectorXd X;
	private: Eigen::VectorXd Xref;
	private: Eigen::VectorXd Erro;
	private: Eigen::VectorXd Input;
	private: Eigen::VectorXd SaveData;
	private: Eigen::VectorXd SaveDataRef;
	private: Eigen::VectorXd SaveDataError;
	private: double Angleref;
	private: double Angleref1;
	private: double Angleref2;
	private: double Angleref3;
	private: double Angleref4;
	private: double Angleref5;
	private: double Angleref6;

	//adaptive mixing
	private: Eigen::VectorXd center;
	private: Eigen::VectorXd cutoff;
	private: std::vector<double> psii;
	private: std::vector<double> mii;

	//kinematic controller
	private: Eigen::VectorXd Trajectory;
	private: Eigen::MatrixXd Kk;
	private: Eigen::VectorXd Xk;
	private: Eigen::VectorXd Uk;
	private: Eigen::VectorXd Dk;
	private: Eigen::VectorXd Xki;
	private: Eigen::MatrixXd Kki;



	public: vant3_adaptiveMixCtrl(): Xref(18,1),     X(18,1), Erro(18,1),      Input(6,1),         Uref(6,1),    Trajectory(20,1),
   									    K(6,18),    K1(6,18),   K2(6,18),        K3(6,18),          K4(6,18),            K5(6,18), 	K6(6,18),
									  center(6),   cutoff(6),    psii(6),          mii(6),         RI_B(3,3),             Wn(3,3), 
                                        Kk(3,3),     Xk(3,1),    Uk(3,1),         Dk(3,1),        Uref1(6,1),          Uref2(6,1),
									 Uref3(6,1),  Uref4(6,1), Uref5(6,1), 	   Uref6(6,1),    SaveData(20,1),   SaveDataRef(20,1),
						    SaveDataError(21,1),    Kki(3,3),   Xki(3,1)
	{	e = 2.718281828459046;
		pi = 3.141592653589793;
		NumeroConjuntos = 6;
		//T = 0.012;
		T = 0.0012;
		Uref1 << 8.7,   8.7,  -5.2*pow(10,-4), -5.2*pow(10,-4), 0, 0;
		Uref2 << 8.9, 8.9,  -1.6*pow(10,-3),  -1.6*pow(10,-3), 0, 0;
		Uref3 << 9.02, 9.02,  -2.8*pow(10,-3),  -2.8*pow(10,-3), 0, 0;
		Uref4 << 9.1, 9.1,  -3.7*pow(10,-3),  -3.7*pow(10,-3), 0, 0;
		Uref5 << 9.22, 9.22,  -5.4*pow(10,-3),  -5.4*pow(10,-3), 0, 0;
		Uref6 << 9.22, 9.22,  -5.4*pow(10,-3),  -5.4*pow(10,-3), 0, 0;
		Angleref1 = 0.08;
		Angleref2 = 0.121;
		Angleref3 = 0.129;
		Angleref4 = 0.1321;
		Angleref5 = 0.145;
		Angleref6 = 0.145;

////Menos Agressivo 10
//K1 << 7.5024,-45.089,-24.996,2.3359,2.9591,12.231,0.35048,-0.084244,-36.146,80.139,107.25,-4.6185,30.646,-18.511,-8.1259,3.4135,-64.184,5.0502,
//0.90544,42.464,-7.3768,-2.3129,-10.694,-11.922,-0.62625,-0.2907,-7.9269,-77.688,-5.5587,1.6578,-41.046,3.7874,-7.1499,-0.27847,51.46,-5.0533,
//-0.082057,0.098578,-0.018829,-0.00013444,-0.20658,-0.049889,-0.02349,-0.0076648,-0.032653,-0.15914,-0.64377,-0.031247,-0.59872,-0.30913,-0.024625,-0.02907,0.1081,-0.028857,
//-0.019429,-0.086536,-0.14653,-0.00094539,-0.18619,0.056995,-0.0064542,-0.022894,-0.24115,0.12624,-0.051868,0.038419,-0.2594,-0.57591,-0.072141,-0.0051421,-0.18532,0.048194,
//-0.24108,-0.15158,-0.80834,0.0020992,-1.135,0.0049685,-0.067289,-0.060048,-1.2785,0.21783,-1.1204,-0.036014,-2.1992,-2.3348,-0.41307,-0.1178,-0.67329,0.088744,
//-0.049606,0.21683,2.0442,-0.0097013,1.5409,-0.019946,0.081551,0.078471,2.9794,-0.29497,-2.4282,0.14154,2.8753,3.1778,0.99674,0.0052455,1.1261,-0.099564;

//K2 << -2.1127,-6.4011,-16.533,1.9224,-0.48984,5.211,0.091763,-0.19129,-19.434,13.659,102.79,-5.624,11.38,-12.821,-6.161,-0.58479,-13.581,-1.9797,
//-2.2465,5.6485,-19.698,-2.0376,-4.2728,-3.9303,-0.23243,-0.19281,-25.698,-15,117.99,5.8123,-18.772,-3.7954,-9.5558,-1.2275,-0.75106,3.9129,
//-0.063139,0.067137,0.006494,-0.00096324,-0.14281,-0.067596,-0.02116,-0.0040866,-0.026011,-0.10998,-0.40982,0.0010061,-0.54731,-0.1707,-0.014224,-0.025149,0.063127,-1.0188e-05,
//-0.069475,-0.054504,-0.16128,-0.00090281,-0.13727,0.0733,-0.0044125,-0.022575,-0.21957,0.073729,0.72902,0.017964,-0.17342,-0.57057,-0.067253,-0.025486,-0.14996,0.033476,
//-0.55851,-0.020806,-1.125,0.0032182,-1.0112,0.069985,-0.062875,-0.063263,-1.5134,-0.076913,4.4273,0.019981,-2.182,-2.5946,-0.49391,-0.2402,-0.64948,0.10649,
//0.74452,0.0078071,2.472,-0.0056262,1.2629,-0.10828,0.070616,0.079818,3.2151,0.14894,-12.534,-0.034072,2.7053,3.4124,1.0795,0.31459,1.1449,-0.19163;

//K3 << -15.256,-10.247,-43.677,1.83,0.59713,12.677,0.41578,-0.57575,-47.801,17.896,371.6,-6.1537,24.098,-29.042,-14.041,-5.1061,-30.799,0.04564,
//-2.8027,6.9243,-12.62,-2.2853,0.095264,-6.8512,-0.077522,0.16345,-16.274,-16.561,108.98,8.378,-13.264,11.849,-6.2798,-1.5135,4.9655,4.6122,
//0.036891,0.070204,0.26979,0.0011798,-0.11594,-0.11038,-0.019511,0.00018195,0.27964,-0.090508,-2.518,-0.024052,-0.5527,0.024595,0.083212,0.0083721,0.18056,-0.031338,
//-0.11041,-0.040986,-0.17041,-0.0010512,-0.11323,0.080328,-0.0041041,-0.02235,-0.21837,0.053993,1.354,0.025692,-0.11472,-0.53857,-0.062049,-0.035996,-0.13563,0.039146,
//-0.9964,-0.11895,-1.5716,-0.012666,-0.9951,0.29925,-0.054788,-0.077478,-1.9207,0.088922,11.837,0.12212,-1.6315,-3.0091,-0.55538,-0.36322,-0.99491,0.22256,
//1.6258,0.17744,3.4712,0.019649,1.0286,-0.45658,0.045348,0.091471,4.1065,-0.094829,-28.065,-0.1959,1.5299,3.6865,1.2451,0.59493,1.7986,-0.38685;

//K4 << -33.106,-13.564,-61.633,1.524,-0.31964,22.206,0.51106,-1.14,-57.432,23.375,666.94,-8.9423,38.292,-56.749,-16.608,-12.677,-45.381,-1.5547,
//6.1979,8.0959,7.3522,-2.2166,1.549,-11.306,0.093243,0.48947,5.0018,-17.318,-81.408,9.7549,-17.284,27.65,0.42662,1.8139,15.96,3.5597,
//0.17985,0.090725,0.42092,0.0030664,-0.067734,-0.17517,-0.018269,0.0068354,0.39581,-0.12952,-4.6708,-0.012673,-0.55178,0.30957,0.11884,0.06981,0.30609,-0.020723,
//-0.11141,-0.040757,-0.11053,-0.0022924,-0.090175,0.094525,-0.0034115,-0.022161,-0.12528,0.061515,1.2592,0.016024,-0.063868,-0.51966,-0.031974,-0.03894,-0.12528,0.023361,
//-0.68541,-0.11869,-0.46331,-0.01376,-0.90685,0.3492,-0.040505,-0.07313,-0.5204,0.20124,4.2985,0.054707,-1.1588,-2.7073,-0.11424,-0.27041,-0.55078,0.087309,
//1.4869,0.21275,2.0621,0.021003,0.88889,-0.57991,0.025228,0.085867,2.0744,-0.31742,-21.588,-0.061127,0.83434,3.4521,0.59056,0.59488,1.3063,-0.14557;

//K5 << -34.521,-17.575,-60.072,2.7133,-2.1097,31.79,0.85188,-1.45,-52.38,33.423,804.2,-23.384,48.191,-78.537,-17.237,-17.046,-48.523,-10.598,
//13.834,12.769,19.88,-3.3114,2.0023,-19.65,-0.23298,0.67702,15.333,-26.684,-271.37,20.571,-26.451,44.664,4.4063,6.2354,26.624,8.6493,
//0.10417,0.06044,0.25887,0.0094011,-0.02821,-0.17126,-0.020613,0.0090707,0.24338,-0.091662,-3.5522,-0.025004,-0.47413,0.36271,0.083679,0.056239,0.20195,-0.0089306,
//-0.16028,-0.060466,-0.21537,-0.0039735,-0.053563,0.16112,0.0012544,-0.023453,-0.21185,0.094241,3.1012,-0.0090919,0.11646,-0.60325,-0.067357,-0.077841,-0.18543,-0.0015769,
//-0.45499,-0.12274,-0.13165,-0.017428,-0.75803,0.41283,-0.029841,-0.06164,-0.17121,0.20635,1.743,0.0417,-0.69712,-2.3669,-0.024208,-0.22391,-0.41157,0.056965,
//0.92819,0.13109,1.0455,0.012049,0.74584,-0.46463,0.020432,0.060775,0.99577,-0.24687,-13.702,0.093756,0.66216,2.6597,0.3114,0.4714,0.71499,0.01776;


//K6 << -14.25,-13.239,-19.889,3.666,-5.0094,20.73,0.18838,-0.71584,-15.602,28.068,319.87,-31.222,21.415,-56.584,-5.2255,-7.4009,-26.001,-12.882,
//9.8473,13.701,11.269,-3.6716,4.1279,-23.225,-0.092764,0.94246,8.5021,-28.431,-204.17,26.365,-25.628,58.824,2.3549,5.0042,25.032,10.503,
//0.0037462,0.028673,0.048126,0.0043342,-0.00038247,-0.095264,-0.018437,0.0029959,0.034745,-0.05905,-0.70263,0.011349,-0.28849,0.19769,0.012671,0.0048625,0.076739,0.0098877,
//-0.11183,-0.089319,-0.14714,-0.0069855,-0.04893,0.27492,0.0073675,-0.028371,-0.15684,0.14227,2.6393,0.012536,0.36954,-0.84111,-0.051185,-0.065871,-0.22231,0.010007,
//-0.25703,-0.073426,0.15152,-0.0057904,-0.64793,0.25212,-0.031573,-0.042789,0.053917,0.080531,-1.8884,0.14897,-0.76398,-1.7568,0.044316,-0.13836,-0.21738,0.097117,
//0.15951,-0.21938,-0.30388,-0.035168,0.61463,0.66211,0.052724,-0.024711,-0.22956,0.37033,5.1968,-0.052521,2.262,-0.3437,-0.095523,0.080368,-0.42389,-0.057899;

//Mais Agressivo 11

//K1 << 9.9274,-65.36,-30.945,2.6208,5.3933,17.137,0.56013,-0.10419,-45.303,114.7,142.59,-9.405,43.533,-23.032,-9.9798,4.2043,-89.834,3.9671,
//4.4793,61.044,-12.352,-2.5727,-13.829,-16.501,-0.76569,-0.21223,-18.736,-110.24,7.5206,4.9889,-53.24,7.5218,-12.116,1.4776,69.29,-3.6002,
//-0.13627,0.1765,-0.053183,0.00078765,-0.34852,-0.081669,-0.03322,-0.01132,-0.098325,-0.28682,-1.0462,-0.037562,-0.97542,-0.5237,-0.055091,-0.04719,0.17998,-0.038384,
//-0.032853,-0.14924,-0.27279,-0.002691,-0.32667,0.092701,-0.010248,-0.032917,-0.45624,0.21413,-0.052328,0.049064,-0.46917,-0.96405,-0.14174,-0.010694,-0.32708,0.072808,
//-0.18613,-0.2436,-1.0413,0.004608,-1.2309,0.030818,-0.060739,-0.055015,-1.7142,0.35418,-0.5553,-0.049251,-2.325,-2.5385,-0.54837,-0.10506,-0.9657,0.12048,
//-0.28655,0.35779,2.7107,-0.013727,1.7748,-0.058391,0.077698,0.076317,4.2142,-0.48513,-4.486,0.20449,3.222,3.6527,1.4061,-0.087743,1.7121,-0.15046;

//K2 << -2.4167,-10.661,-17.62,2.6441,0.25325,8.0111,0.15441,-0.14831,-21.51,21.547,109.67,-8.7246,17.125,-16.086,-6.6149,-0.68739,-18.623,-3.7115,
//0.0010111,10.166,-35.898,-2.8598,-3.9336,-5.9282,-0.15178,-0.15536,-50.683,-25.448,235.27,10.55,-20.695,-0.49457,-18.907,-0.34194,-3.9997,8.5666,
//-0.11856,0.11511,0.05751,-0.0018127,-0.24176,-0.11191,-0.029656,-0.0057626,0.021933,-0.18159,-1.0704,-0.0011336,-0.88863,-0.30371,0.0015442,-0.04962,0.12574,-0.0047501,
//-0.11658,-0.094198,-0.30988,-0.0017072,-0.23418,0.12586,-0.0067858,-0.031809,-0.44761,0.12121,1.4657,0.034394,-0.31628,-0.94644,-0.1419,-0.043039,-0.27754,0.063915,
//-0.75528,0.012319,-1.1655,0.0084654,-1.3501,0.057597,-0.07094,-0.072179,-1.6998,-0.1108,3.5111,0.0031956,-2.9599,-3.4215,-0.55745,-0.32798,-0.69341,0.082246,
//0.90568,-0.04783,3.1377,-0.0073705,1.6335,-0.12161,0.077369,0.089134,4.401,0.29291,-15.917,-0.082868,3.5411,4.4077,1.5028,0.38843,1.486,-0.28298;

//K3 << -22.621,-15.684,-64.75,1.7051,2.1315,20.34,0.6443,-0.74431,-76.712,25.103,558.02,-7.7402,39.556,-44.018,-22.619,-7.8852,-48.939,0.74683,
//-2.0545,9.8715,-13.044,-2.4578,0.1592,-9.6051,-0.11537,0.21979,-18.881,-21.889,114.51,11.777,-17.007,17.14,-7.9397,-1.6233,10.038,6.5404,
//0.10662,0.13903,0.59182,0.0065371,-0.2027,-0.22339,-0.028486,0.0023705,0.68391,-0.1673,-5.5108,-0.05165,-0.96888,0.12392,0.2068,0.032744,0.39928,-0.072956,
//-0.20832,-0.078288,-0.34633,-0.0041533,-0.18969,0.15312,-0.0055494,-0.031837,-0.46955,0.098856,2.7877,0.046688,-0.16655,-0.9185,-0.13538,-0.069979,-0.27503,0.0742,
//-1.3149,-0.19614,-2.0738,-0.023312,-1.2843,0.48189,-0.056713,-0.088601,-2.7344,0.15805,15.674,0.1746,-1.9221,-4.0574,-0.78987,-0.48278,-1.4293,0.31993,
//2.1449,0.30264,4.5451,0.036383,1.3279,-0.75661,0.045434,0.10742,5.8122,-0.19164,-36.944,-0.30253,1.6693,5.0957,1.7732,0.80516,2.5665,-0.56054;

//K4 << -53.621,-21.208,-97.27,1.8895,1.7694,34.372,0.81274,-1.4373,-97.931,35.324,1057.4,-16.967,61.708,-80.765,-28.621,-22.264,-69.4,-4.0309,
//15.282,13.166,22.385,-2.942,1.3463,-18.121,-0.0079753,0.69509,20.415,-26.194,-245,16.229,-27.784,41.799,4.6676,5.6463,28.761,5.5524,
//0.37351,0.16245,0.81867,0.0091532,-0.12592,-0.31732,-0.027013,0.01148,0.83984,-0.22242,-9.1318,-0.0061386,-0.94733,0.54754,0.25472,0.16055,0.55448,-0.027872,
//-0.22424,-0.07641,-0.25306,-0.0059858,-0.14951,0.1784,-0.0046233,-0.030878,-0.29801,0.11305,2.8291,0.021887,-0.060375,-0.87944,-0.080239,-0.084886,-0.24359,0.037926,
//-0.98184,-0.21414,-0.75422,-0.026057,-1.1635,0.57675,-0.039891,-0.084023,-0.89217,0.32732,7.1918,0.056119,-1.2384,-3.6544,-0.20322,-0.39241,-0.87025,0.1206,
//2.0387,0.34123,2.7696,0.041186,1.13,-0.89428,0.023051,0.098655,2.9921,-0.48251,-29.049,-0.024739,0.75907,4.6231,0.8493,0.85,1.8276,-0.16451;

//K5 << -33.638,-30.955,-58.882,3.8419,-1.2244,55.602,2.1254,-1.5894,-52.497,57.496,793.97,-42.993,97.181,-119.51,-15.82,-17.958,-69.372,-18.142,
//19.431,25.765,30.917,-4.5681,0.55421,-41.95,-1.424,0.97382,25.177,-49.899,-425.35,38.589,-72.015,84.244,6.385,10.087,51.087,15.679,
//0.16114,0.14361,0.39963,0.023851,-0.038608,-0.42574,-0.03212,0.020024,0.40392,-0.21106,-5.6056,-0.036607,-0.99412,0.90989,0.1336,0.095261,0.4003,-0.0045922,
//-0.21125,-0.12297,-0.24254,-0.0079167,-0.10999,0.30976,0.0026904,-0.033048,-0.28251,0.19195,3.6572,-0.012709,0.25018,-1.0798,-0.087516,-0.10604,-0.31589,0.0082369,
//-0.46376,-0.14115,0.06746,-0.022708,-1.0192,0.4744,-0.036529,-0.063052,-0.050978,0.1988,-1.0107,0.1219,-1.0516,-2.9219,0.028789,-0.22221,-0.43183,0.11704,
//0.56367,-0.042352,0.066426,-0.0084099,1.0544,-0.0029818,0.045687,0.033643,0.14451,0.033387,-0.12612,0.04062,2.0138,2.0691,0.019054,0.2734,0.11037,-0.051918;

//K6 << -9.6875,-17.965,-29.807,4.7416,-3.2829,26.851,1.0155,-0.1942,-25.725,41.868,470.19,-71.587,46.115,-57.377,-10.29,-0.045995,-39.848,-22.171,
//8.1443,20.525,23.632,-4.5034,3.3218,-35.663,-0.98426,0.84711,20.987,-45.085,-401.77,63.927,-56.505,76.869,7.9788,-0.3101,43.452,19.076,
//0.032328,0.089723,0.11308,0.018514,0.016483,-0.30276,-0.026266,0.012974,0.11294,-0.1419,-1.9022,-0.027687,-0.62124,0.71382,0.04057,0.024116,0.21539,-0.0085041,
//-0.13502,-0.15063,-0.15867,-0.0062502,-0.094163,0.42268,0.0083366,-0.035427,-0.20045,0.24682,3.0335,-0.043754,0.52228,-1.2663,-0.063124,-0.076049,-0.35119,0.00074669,
//-0.25012,0.016034,0.61139,-0.0025235,-0.84488,0.08282,-0.03952,-0.03615,0.49826,-0.23353,-9.6617,1.1781,-1.1656,-1.7775,0.24045,-0.25972,0.16686,0.40667,
//0.067105,-0.45714,-0.94169,-0.062647,0.76479,1.2106,0.065865,-0.045715,-0.92897,0.93893,16.455,-1.3887,2.984,-1.2326,-0.39713,0.20164,-1.1748,-0.45581;

//12

//K1 << 1.6225,-23.996,-2.4341,5.0196,1.2505,12.604,0.67883,-0.14441,-2.6892,48.213,10.174,-4.8451,38.334,-28.467,0.13097,0.88137,-28.561,-3.8117,
//-1.4118,23.792,-2.1146,-5.0782,-0.93481,-12.966,-0.24781,0.58192,-2.8907,-48.881,-1.727,4.6476,-36.118,31.18,-2.2533,-0.94058,28.609,3.9503,
//-0.043746,0.019918,0.017342,0.0037304,-0.058715,-0.041171,-0.023981,-0.00091864,0.011885,-0.026609,-0.31315,-0.037271,-0.34131,-0.041675,0.0091239,-0.019471,0.01266,-0.017468,
//-0.046435,-0.01684,0.01413,-0.0029547,-0.061218,0.042966,-0.00096996,-0.024356,0.0094391,0.031405,-0.32848,0.03856,-0.051194,-0.35608,0.0050899,-0.022806,-0.012258,0.021937,
//-0.10803,0.024914,-0.11469,-0.0021855,-0.11934,-0.061116,-0.0040188,-0.0030726,-0.12458,-0.064623,-0.64521,-0.038409,-0.40522,-0.30426,-0.086709,-0.11475,-0.0056232,-0.076136,
//0.1207,-0.060918,0.2426,-0.007533,0.14952,0.071143,-0.010808,-0.011946,0.29483,0.083401,0.61281,0.043657,0.49914,0.37102,0.13504,0.12333,-0.049783,0.057717;

//K2 << -0.67218,-17.395,-2.9603,4.6225,-0.10604,13.524,0.59603,-0.34172,-2.3517,33.664,9.9831,-9.1473,36.785,-36.188,0.089533,-0.51221,-22.767,-6.574,
//-0.22896,17.437,-1.6356,-4.6621,0.23465,-14.188,-0.1905,0.76824,-2.7472,-34.616,8.5746,9.0673,-35.785,38.693,-2.1493,-0.039176,23.189,6.6387,
//-0.025126,0.02641,0.018255,0.0037893,-0.031453,-0.052828,-0.021541,0.0021907,0.014581,-0.0344,-0.22222,-0.039228,-0.2781,0.071089,0.010482,-0.010997,0.020908,-0.022977,
//-0.030241,-0.024474,0.013141,-0.0027028,-0.035564,0.058471,0.0022375,-0.022708,0.0085146,0.047421,-0.21421,0.029925,0.054258,-0.3107,0.0069287,-0.015225,-0.027804,0.018826,
//-0.16803,0.078741,-0.088589,0.0014471,-0.18695,-0.10545,-0.0052258,-0.0024188,-0.040327,-0.12023,-0.59286,-0.026407,-0.61931,-0.3693,-0.039339,-0.14666,0.039055,-0.068261,
//0.20163,-0.12705,0.21906,-0.012355,0.19531,0.13035,-0.011335,-0.014657,0.19497,0.1495,0.089615,0.035204,0.67938,0.34843,0.085796,0.16385,-0.11035,0.05813;


//K3 << -1.6371,-12.825,-3.496,4.4221,-0.9807,11.83,0.47243,-0.1517,-2.6841,26.082,15.675,-10.537,29.562,-33.679,-0.47008,-1.0034,-17.999,-7.2248,
//0.16127,13.112,-1.1512,-4.4407,0.9977,-12.926,-0.080709,0.58567,-2.2071,-27.234,10.66,10.552,-29.343,36.746,-1.5489,0.17741,18.8,7.2798,
//-0.02046,0.027083,0.019484,0.0036549,-0.021821,-0.06146,-0.020763,0.0030343,0.016737,-0.029125,-0.24864,-0.047995,-0.27223,0.12903,0.011822,-0.0099237,0.024934,-0.026937,
//-0.029398,-0.02466,0.013672,-0.0029224,-0.029906,0.074038,0.0034412,-0.023637,0.0085013,0.057187,-0.21334,0.017746,0.09434,-0.32768,0.0096041,-0.015966,-0.04089,0.0098822,
//-0.18338,0.11214,-0.054026,0.0038133,-0.27104,-0.13406,-0.0065253,-0.0028952,0.026147,-0.1253,-0.8179,-0.027078,-0.73157,-0.40592,-0.0054621,-0.1523,0.074704,-0.062343,
//0.23334,-0.17615,0.18661,-0.015828,0.2712,0.18347,-0.010357,-0.014725,0.12242,0.16273,0.028538,0.04601,0.81034,0.31448,0.050173,0.17837,-0.16513,0.060639;

//K4 << -1.0122,-10.492,-4.3531,4.3458,-1.0846,10.462,0.45306,0.052007,-3.4821,20.421,38.329,-10.45,32.189,-28.29,-1.5219,0.64339,-14.654,-5.7541,
//-0.53979,11.01,-0.38367,-4.3425,1.1192,-12.159,-0.075688,0.39782,-1.1224,-21.755,-2.4613,10.362,-32.539,32.681,-0.47408,-1.5899,15.753,5.6516,
//-0.028412,0.030034,0.021372,0.0032053,-0.016753,-0.066255,-0.019356,0.0029639,0.020057,-0.029058,-0.37075,-0.039346,-0.31088,0.13829,0.0137,-0.015876,0.0413,-0.020774,
//-0.038782,-0.014079,0.01595,-0.0027593,-0.02738,0.077727,0.0037946,-0.023829,0.011093,0.053817,-0.29383,0.011653,0.049242,-0.34318,0.013536,-0.02546,-0.033397,0.0031225,
//-0.15347,0.13355,0.0036261,0.0042048,-0.30986,-0.15147,-0.0083107,-0.0042017,0.12386,-0.11403,-1.4071,-0.023727,-0.7704,-0.33335,0.03849,-0.1422,0.1116,-0.056844,
//0.2136,-0.22069,0.13179,-0.017583,0.30114,0.24206,-0.0086546,-0.014413,0.014591,0.16942,0.34922,0.049554,0.93249,0.15726,0.004602,0.17925,-0.23734,0.063305;

//K5 << -0.49236,-9.3364,-3.7394,4.5846,-1.7638,11.375,0.61222,-0.20983,-2.2278,21.588,34.77,-16.11,28.52,-31.391,-0.56753,-0.45615,-16.438,-9.9788,
//-0.71153,10.07,-0.78451,-4.5647,1.8091,-13.635,-0.24869,0.66638,-1.8603,-23.085,6.3487,15.933,-29.864,36.817,-1.3341,-0.43812,17.845,9.713,
//-0.035969,0.028764,0.016091,0.0025707,-0.0080862,-0.070899,-0.017635,0.0041603,0.019366,-0.029888,-0.37343,-0.033506,-0.28549,0.16194,0.012076,-0.020105,0.050707,-0.014776,
//-0.046397,-0.0076557,0.011189,-0.0018944,-0.020531,0.070934,0.0043802,-0.022455,0.011031,0.038896,-0.25353,0.014404,0.059877,-0.31822,0.011628,-0.029512,-0.017731,0.0097204,
//-0.1024,0.15176,0.058107,0.0046612,-0.28511,-0.18068,-0.007906,-0.0025339,0.20843,-0.1195,-2.2076,-0.017237,-0.71687,-0.1512,0.073496,-0.10944,0.15858,-0.045269,
//0.15714,-0.25519,0.075958,-0.019284,0.26662,0.31419,-0.0094252,-0.017942,-0.08472,0.19482,0.9193,0.044758,0.91984,-0.11573,-0.029831,0.14802,-0.31772,0.053229;

//K6 << 0.057053,-8.2008,-3.1095,4.8324,-2.0428,11.808,0.80123,-0.48421,-1.4871,21.923,30.339,-19.202,28.265,-34.148,-0.38872,-0.28096,-16.021,-11.543,
//-0.92071,9.0754,-1.1031,-4.8155,2.1038,-14.48,-0.44337,0.94717,-2.1513,-23.549,12.199,19.054,-30.26,40.267,-1.3918,-0.48203,17.726,11.236,
//-0.036899,0.028622,0.012315,0.001544,-0.003503,-0.072413,-0.016267,0.0046746,0.019674,-0.028296,-0.3764,-0.029296,-0.26326,0.17836,0.011038,-0.021614,0.052915,-0.014123,
//-0.047064,-0.0016945,0.008711,-0.00051558,-0.016392,0.06082,0.0044578,-0.021124,0.013706,0.028493,-0.24491,0.012892,0.057704,-0.28058,0.011529,-0.031514,-0.0077498,0.010009,
//-0.058293,0.16323,0.087196,0.0039725,-0.25218,-0.19782,-0.0049601,-0.00017163,0.253,-0.11462,-2.8716,-0.01957,-0.64355,-0.0093408,0.09709,-0.075822,0.18795,-0.041998,
//0.10155,-0.27864,0.039615,-0.018623,0.22786,0.36534,-0.012616,-0.021685,-0.14357,0.20376,1.5051,0.044818,0.87784,-0.3309,-0.054937,0.11091,-0.37129,0.051358;


// 13
K1 << 0.52283,-23.224,-3.4989,4.9001,0.18323,12.384,0.73798,-0.15163,-4.5017,45.987,4.8247,-4.1867,35.855,-32.179,-0.95675,0.038209,-27.447,-3.5293,
-0.67528,23.373,-3.0463,-4.9764,0.14567,-13.239,-0.035893,0.87221,-4.2521,-47.758,5.2002,3.8022,-32.675,36.959,-2.7614,-0.35825,27.95,3.6448,
-0.031075,0.018191,0.011941,0.003549,-0.038737,-0.037667,-0.0216,0.00066131,0.0084272,-0.025148,-0.20164,-0.035141,-0.26845,0.010005,0.0086508,-0.014021,0.011293,-0.016459,
-0.035584,-0.016413,0.009323,-0.0028171,-0.042215,0.041799,0.00062079,-0.022312,0.0042348,0.031851,-0.22752,0.035877,-0.00047935,-0.29397,0.0039902,-0.017369,-0.01271,0.020486,
-0.29144,0.099778,-0.1328,-0.0013593,-0.28671,-0.13367,-0.0061648,-0.0036172,-0.13161,-0.17879,-1.7945,-0.078389,-0.95933,-0.68681,-0.12899,-0.23877,0.038917,-0.13697,
0.28293,-0.18555,0.32281,-0.017207,0.28085,0.16302,-0.029393,-0.032636,0.40623,0.2392,1.5436,0.093304,0.94517,0.58205,0.21939,0.23857,-0.15809,0.11265;

K2 << -1.9102,-17.369,-4.441,4.5513,-0.84956,13.82,0.92327,-0.35259,-4.5012,33.489,9.3337,-8.1048,37.554,-41.351,-1.2587,-1.3634,-22.601,-6.2334,
0.10135,18.075,-2.3293,-4.5764,0.9595,-15.475,-0.2468,1.0803,-3.5053,-35.661,13.767,7.9864,-36.245,46.909,-2.42,0.23576,23.89,6.1755,
-0.018297,0.025518,0.010686,0.0031774,-0.019667,-0.047677,-0.01977,0.0024882,0.0071593,-0.032059,-0.1383,-0.040188,-0.22602,0.10496,0.008555,-0.008957,0.020529,-0.022409,
-0.025851,-0.021325,0.0085122,-0.0025249,-0.026113,0.05522,0.0026556,-0.021985,0.0029047,0.047648,-0.15944,0.019927,0.066317,-0.26325,0.0066434,-0.014005,-0.029128,0.012896,
-0.34359,0.19797,-0.080612,0.0056959,-0.38317,-0.19108,-0.0052184,-0.0014629,0.0606,-0.23425,-1.7667,-0.04667,-1.1823,-0.75149,-0.016517,-0.28349,0.11311,-0.11349,
0.38033,-0.31919,0.28212,-0.027305,0.36175,0.26817,-0.03096,-0.03652,0.19613,0.32141,0.95531,0.070303,1.2059,0.50231,0.10976,0.30564,-0.27751,0.10655;

K3 << -1.3656,-13.293,-5.0495,4.5444,-1.2568,12.201,0.84454,-0.11891,-4.8993,25.834,27.288,-9.9483,36.75,-35.116,-2.0854,0.19534,-18.535,-6.2426,
-0.70589,14.551,-1.7775,-4.525,1.3469,-15,-0.1847,0.87615,-2.4846,-28.419,7.2217,9.7968,-36.987,43.077,-1.5453,-1.5911,20.486,5.9824,
-0.033805,0.031223,0.012572,0.0030999,-0.01817,-0.056296,-0.019086,0.0023571,0.010976,-0.03118,-0.2666,-0.034949,-0.29273,0.1016,0.011023,-0.020087,0.041596,-0.018987,
-0.040947,-0.011547,0.0099819,-0.0022049,-0.025637,0.060251,0.0027594,-0.022486,0.0043397,0.045757,-0.25669,0.015641,0.012964,-0.29855,0.010404,-0.027644,-0.018608,0.007464,
-0.30557,0.244,-0.013705,0.0070127,-0.4553,-0.21089,-0.0075902,-0.0027198,0.2111,-0.21864,-2.2684,-0.023547,-1.2478,-0.71756,0.055812,-0.26557,0.1743,-0.088331,
0.36392,-0.41395,0.21807,-0.032042,0.42431,0.37033,-0.027843,-0.037012,0.027007,0.34644,1.1055,0.059019,1.4321,0.30984,0.03737,0.30762,-0.40806,0.095571;

K4 << -1.344,-10.94,-4.8363,4.8547,-2.0445,12.609,0.96919,-0.36226,-4.0545,25.34,30.397,-15.992,30.641,-38.33,-1.6158,-1.1801,-19.053,-10.052,
-0.2247,12.823,-1.6773,-4.7896,2.2042,-16.808,-0.32962,1.1446,-2.3722,-28.441,12.439,15.564,-33.218,48.886,-1.8623,-0.11865,21.814,9.5094,
-0.040573,0.029577,0.0098127,0.0022755,-0.0094559,-0.062856,-0.016576,0.0040639,0.016385,-0.028356,-0.28774,-0.033479,-0.25555,0.13757,0.011477,-0.024533,0.049786,-0.016509,
-0.048667,-0.0034604,0.0055188,-0.0012798,-0.018436,0.051712,0.0036571,-0.020626,0.0052424,0.030207,-0.21911,0.014449,0.031797,-0.25987,0.0083708,-0.030687,-0.0028381,0.010636,
-0.21727,0.27212,0.042844,0.0062996,-0.44127,-0.24063,-0.0053463,-0.00027602,0.34499,-0.20304,-2.9257,-0.014338,-1.1146,-0.42727,0.11246,-0.20496,0.21887,-0.069219,
0.26005,-0.48911,0.15344,-0.03476,0.392,0.50817,-0.030271,-0.043171,-0.14116,0.37935,1.4253,0.069877,1.4168,-0.21104,-0.020062,0.24356,-0.52756,0.090086;

K5 << -0.22184,-9.8882,-4.5676,5.3054,-2.1134,12.967,1.1938,-0.59254,-3.4786,25.511,37.033,-20.923,30.224,-38.467,-1.545,-0.17158,-19.378,-12.281,
-0.56856,12.115,-1.4199,-5.2212,2.3555,-18.117,-0.55474,1.3892,-2.0328,-28.812,9.4677,20.365,-34.178,50.577,-1.6458,-0.81455,22.755,11.584,
-0.039585,0.029398,0.0082502,0.0011592,-0.0059887,-0.060741,-0.013927,0.004219,0.022153,-0.019175,-0.33121,-0.032556,-0.22155,0.14253,0.012824,-0.025457,0.047723,-0.019344,
-0.046487,0.0075573,0.0033036,-0.00017121,-0.014251,0.032225,0.0033472,-0.018456,0.0101,0.010943,-0.21678,0.012597,0.010175,-0.19312,0.0083714,-0.032605,0.014164,0.010947,
-0.12904,0.29029,0.0788,0.0028788,-0.38624,-0.24116,0.0043198,0.0026077,0.42613,-0.16041,-3.7356,-0.021648,-0.93835,-0.19778,0.17358,-0.14945,0.2552,-0.068999,
0.13896,-0.53591,0.098024,-0.033027,0.32645,0.5874,-0.040388,-0.04827,-0.25727,0.35851,2.1192,0.085944,1.3253,-0.59318,-0.0883,0.17418,-0.61482,0.099617;

K6 << 0.90277,-8.832,-4.3093,5.9005,-1.8616,11.86,1.2859,-0.64817,-3.4636,23.75,44.398,-23.669,28.086,-33.659,-1.7988,0.52332,-16.803,-12.366,
-1.1462,11.196,-1.2951,-5.8421,2.1651,-17.501,-0.63775,1.447,-1.5783,-27.076,4.1754,23.209,-32.556,46.457,-1.1804,-1.1848,20.582,11.691,
-0.036411,0.02933,0.0083137,1.0835e-05,-0.0064108,-0.056304,-0.011728,0.0034829,0.025787,-0.0093881,-0.38543,-0.034938,-0.19862,0.13163,0.013658,-0.022249,0.041567,-0.024832,
-0.047315,0.01559,0.0038717,0.00053858,-0.014025,0.017396,0.0028021,-0.01749,0.016568,-0.001621,-0.27607,0.014246,-0.015053,-0.161,0.01108,-0.036858,0.028022,0.01197,
-0.085177,0.28938,0.097933,-0.0019526,-0.34922,-0.20514,0.015041,0.0012841,0.45431,-0.099038,-4.4344,-0.028463,-0.79242,-0.17321,0.20881,-0.10789,0.27005,-0.075395,
0.072382,-0.54959,0.063398,-0.026545,0.28481,0.59664,-0.051732,-0.047442,-0.30274,0.30491,2.7835,0.087164,1.2204,-0.68754,-0.12898,0.11871,-0.65951,0.1068;
}
		
	public: ~vant3_adaptiveMixCtrl()
	{
	
	}
		
	public: void config()
	{
			
	}
	
	private: double xii(double u, double center, double cutoff)
	{
		double w = ( u - center ) / cutoff;
		
		if(abs(w) < 1){
			return pow(e, ( -1.0 / ( 1.0 - pow(w,2.0) )));	
		}
		else{
			return 0.0;	
		}
	}
	private: Eigen::VectorXd TrajetoriaReferenciaCompleta(double Tempo)
	{
		Eigen::VectorXd Traj(20);

		//complete trajectory
		double X,Y,Z,Xp,Yp,Zp,Phi,Theta,Psi,Phip,Thetap,Psip, Ar, Al, Arp, Alp;
		Theta = -0.065;
		Thetap = 0.0;
		Phi = 0.0;
		Phip = 0.0;
		Ar =  0.065;
		Arp = 0.0;
		Al =  0.065;
		Alp = 0.0;
		double RT = 144.0;
		double T = 60.3186;
		std::cout << Tempo << std::endl;
		if(Tempo < 20)
		{
			X = 0.0;
			Y = 0.0;
			Z = 1+0.5*Tempo;
			Psi = 0.0;
			Xp = 0.0;
			Yp = 0.0;
			Zp = 0.5;
			Psip = 0.0;
		}
		else if(Tempo >= 20.0 && Tempo < 20.0 + 19.2)
		{
			Tempo = Tempo - 20.0;    
			X = (0.7813/2)*pow(Tempo,2.0);
			Y = 0.0;
			Z = 11.0;
			Psi = 0.0;
			Xp = (0.7813)*Tempo;
			Yp = 0.0;
			Zp = 0.0;
			Psip = 0.0;    
		}
		else if((Tempo >= 20.0 + 19.2) && (Tempo < 20.0 + 19.2 + 45.2389))
		{		
			Tempo = Tempo - 20.0 - 19.2;

			X = RT*cos(((15.0/144.0)*Tempo)-(pi/2.0)) + RT;
			Y = RT*sin(((15.0/144.0)*Tempo)-(pi/2.0)) + RT;
			Z = 11 + 2*sin((2*pi/22.6195)*Tempo);
			Psi = (Tempo / 45.2389) * (3.0/4.0)*2.0*pi;
			Xp = -(5*RT*sin((5.0*Tempo)/48.0 - pi/2.0))/48.0;
			Yp = (5*RT*cos((5.0*Tempo)/48.0 - pi/2.0))/48.0;
			Zp = (8000.0*pi*cos((4000.0*pi*Tempo)/45239.0))/45239.0;
			Psip = (1.0 / 45.2389) * (3.0/4.0)*2.0*pi;
			//std::cout << "Entrei1" << std::endl;
		}
		else if(Tempo >= 20.0 + 19.2 + 45.2389 && Tempo < 20.0 + 19.2 + 45.2389 + 19.2)
		{
			//std::cout << "Entrei2" << std::endl;
			Tempo = Tempo - 20.0 - 19.2 - 45.2389;    
			X = 0.0;
			Y = RT+(0.7826/2.0)*pow(Tempo,2) - 15.0*Tempo;
			Z = 11.0;
			Psi = (3.0/4.0)*2.0*pi;
			Xp = 0.0;
			Yp = -15.0+(0.7826)*Tempo;
			Zp = 0.0;
			Psip = 0.0;  
		}
		else if(Tempo >= 20.0 + 19.2 + 45.2389 + 19.2 && Tempo <= 20 + 19.2 + 45.2389 + 19.2 + 20.0){
			Tempo = Tempo - (20 + 19.2 + 45.2389 + 19.2);
			X = 0.0;
			Y = 0.0;
			//Z = 11.0;
			Z = 1.0+0.5*(20.0-Tempo);
			Psi = (3.0/4.0)*2.0*pi;
			Xp = 0.0;
			Yp = 0.0;
			Zp = 0.0;
			Psip = 0.0;
		}
		else{
			X = 0.0;
			Y = 0.0;
			//Z = 11.0;
			Z = 1.0;
			Psi = (3.0/4.0)*2.0*pi;
			Xp = 0.0;
			Yp = 0.0;
			Zp = 0.0;
			Psip = 0.0;
		}

//   // just rotate in psi
//		if(Tempo < 40)
//		{
//			X = 0.0;
//			Y = 0.0;
//			Z = 1.0;
//			Psi = -(2*pi)*Tempo/40;
//			Xp = 0.0;
//			Yp = 0.0;
//			Zp = 0.0;
//			Psip = -2*pi/40;
//		}
//		else{  
//			X = 0.0;
//			Y = 0.0;
//			Z = 1.0;
//			Psi = -2*pi;
//			Xp = 0.0;
//			Yp = 0.0;
//			Zp = 0.0;
//			Psip = 0.0;   
//		}



		//Maps to the body
		Eigen::MatrixXd RIB(3,3);
		Eigen::MatrixXd W_n(3,3);
		Eigen::VectorXd XpYpZp(3);
		Eigen::VectorXd PhipThetapPsip(3);
		Eigen::VectorXd UVW(3);
		Eigen::VectorXd PQR(3);

		XpYpZp << Xp, Yp, Zp;
		PhipThetapPsip << Phip, Thetap, Psip;

		RIB <<  (cos(Psi)*cos(Theta)), (cos(Psi)*sin(Phi)*sin(Theta) - cos(Phi)*sin(Psi)), (sin(Phi)*sin(Psi) + cos(Phi)*cos(Psi)*sin(Theta)),
				(cos(Theta)*sin(Psi)), (cos(Phi)*cos(Psi) + sin(Phi)*sin(Psi)*sin(Theta)), (cos(Phi)*sin(Psi)*sin(Theta) - cos(Psi)*sin(Phi)), 
                        (-sin(Theta)),                              (cos(Theta)*sin(Phi)),                              (cos(Phi)*cos(Theta));
		W_n << 1.0,         0.0,          -sin(Theta), 
		       0.0,  cos(Phi),  cos(Theta)*sin(Phi),
               0.0, -sin(Phi),  cos(Phi)*cos(Theta);
		
		UVW = RIB.transpose() * XpYpZp;
		PQR = W_n * PhipThetapPsip;

		Traj << UVW(0), UVW(1), UVW(2),
                PQR(0), PQR(1), PQR(2),
	               Arp,    Alp, 
   		             X,      Y,      Z,
                   Phi,  Theta,    Psi,
					Ar,     Al, 
                   0.0,    0.0,    0.0,     0.0;

		//simple reference
//		Traj << 0,0,0,0,     0,0,     0,      0, //uvwpqr arp alp
//				0,0,1,0,-0.065,0,0.065, 0.065, //xyzphithetapsi ar al
//                0,0,0,0;

		return Traj;
	}

	private: Eigen::VectorXd MakeXref(Eigen::VectorXd Trajectory )
	{
		Eigen::VectorXd xRef(18);
		xRef << Trajectory(0), Trajectory(1), Trajectory(2), Trajectory(3), Trajectory(4), Trajectory(5), // uvw pqr
		Trajectory(6), Trajectory(7), //arp alp
		Trajectory(10), // z
		Trajectory(11),Trajectory(12),Trajectory(13),Trajectory(14), Trajectory(15), // phi theta psi ar al
		Trajectory(16), Trajectory(17), Trajectory(18), Trajectory(19); // integrators
		return xRef;
	}
	
	public: std::vector<double> execute(simulator_msgs::SensorArray arraymsg)
	{
		//read data from sensors
		simulator_msgs::Sensor msg;
		msg = arraymsg.values.at(0);			 			
		//msg: x y z phi theta psi alphar alphal xp yp zp phip thetap psip alpharp alphalp		
		static double PsiAnt = 0;

		//Map inertial velocity to body velocity
		double phi = msg.values.at(3);
		double theta = msg.values.at(4);
		double psi = msg.values.at(5);
		RI_B << (cos(psi)*cos(theta)), (cos(psi)*sin(phi)*sin(theta) - cos(phi)*sin(psi)), (sin(phi)*sin(psi) + cos(phi)*cos(psi)*sin(theta)),
				(cos(theta)*sin(psi)), (cos(phi)*cos(psi) + sin(phi)*sin(psi)*sin(theta)), (cos(phi)*sin(psi)*sin(theta) - cos(psi)*sin(phi)), 
                (-sin(theta)), (cos(theta)*sin(phi)), (cos(phi)*cos(theta));
		
		Eigen::MatrixXd XpYpZp(3,1);
		Eigen::MatrixXd PhipThetapPsip(3,1);
		Eigen::MatrixXd WIIB(3,1);
		Eigen::MatrixXd uvw(3,1);
		Eigen::MatrixXd pqr(3,1);
		XpYpZp << msg.values.at(8), msg.values.at(9), msg.values.at(10);
		WIIB << msg.values.at(11), msg.values.at(12), msg.values.at(13);
		uvw = RI_B.transpose()*XpYpZp;
		pqr = RI_B.transpose()*WIIB;

		//build reference values
		static double Tempo = 0;
		Trajectory = TrajetoriaReferenciaCompleta(Tempo);
		Tempo = Tempo + T;
		Xref =  MakeXref(Trajectory);

		

		// State vector: u v w p q r alpharp alphalp z phi theta psi alphar alphal intz intu intv intpsi
		X << uvw(0), uvw(1), uvw(2),
			 pqr(0), pqr(1), pqr(2),
			 msg.values.at(14),
             msg.values.at(15),
             msg.values.at(2),
             msg.values.at(3),
             msg.values.at(4), 
             msg.values.at(5), 
             msg.values.at(6),
             msg.values.at(7), 
			 0, 0, 0, 0;
		//Deal's with Psi Discontinuity at 180 degree
		if(X(11) - Xref(11) < -pi)
		{
		   X(11) = X(11) +  2*pi;
		}
		else if(X(11) - Xref(11) > pi)
		{
		   X(11) = X(11) - 2*pi;
		}

		//kinematic controller
		//proportional
		Xk << Trajectory(8)-msg.values.at(0), Trajectory(9)-msg.values.at(1), 0; // x-xr, y-yr
		Uk << Trajectory(0), Trajectory(1), Trajectory(2);
		Kk <<  0.8,    0,   0,
                 0,  0.4,   0,
                 0,    0,   1;
		//integral
		Kki <<  0.02,    0,   0,
                  0, 0.01,   0,
                  0,    0, 0.03;
		static double xint, x_ant = 0;
		static double yint, y_ant = 0;

		double x_atual = Trajectory(8)-msg.values.at(0);
		xint = xint + (T/2)*(x_atual + x_ant);
		x_ant = x_atual;

		double y_atual = Trajectory(9)-msg.values.at(1);
		yint = yint + (T/2)*(y_atual + y_ant);
		y_ant = y_atual;

		Xki << xint, yint, 0;

		//kinematic controller  action
		Dk = Kk*RI_B.transpose()*Xk+Kki*RI_B.transpose()*Xki+Uk;
		Xref(0) = Dk(0);
		Xref(1) = Dk(1);
		Xref(2) = Dk(2);

		// Trapez integral intz intu intv intpsi
		static double ubint, ub_ant = 0;
		static double vbint, vb_ant = 0;
		static double zint, z_ant = 0;
		static double yawint, yaw_ant = 0;

		double ub_atual = X(0) - Xref(0);
		ubint = ubint + (T/2)*(ub_atual + ub_ant);
		ub_ant = ub_atual;
		
		double vb_atual = X(1) - Xref(1);
		vbint = vbint + (T/2)*(vb_atual + vb_ant);
		vb_ant = vb_atual;
		
		double z_atual = X(8) - Xref(8);
		zint = zint + (T/2)*(z_atual + z_ant);
		z_ant = z_atual;
		
		double yaw_atual = X(11) - Xref(11);
		yawint = yawint + (T/2)*(yaw_atual + yaw_ant);
		yaw_ant = yaw_atual;

		X(14) = zint;
		X(15) = ubint;
		X(16) = vbint;
		X(17) = yawint;

		//adaptive mixing
		double ub;
	 	center <<  2.5,   6, 8.5,  11, 13.25, 15;
		cutoff << 2.50, 1.5, 1.5, 1.5,  1.25,  1; 
		ub = uvw(0);

		if(ub < 0.1)
		{
			ub = 0.1;
		}
		else if(ub > 15.9){
			ub = 15.9;
		}						
		for(size_t i = 0; i < NumeroConjuntos; i++)
		{
			psii[i] = xii(ub, center[i], cutoff[i]); 
		}	
		
		for(size_t i = 0; i < NumeroConjuntos; i++)
		{
			mii[i] = psii[i]/(psii[0]+psii[1]+psii[2]+psii[3]+psii[4]+psii[5]);
		}	
		K = mii[0]*K1 + mii[1]*K2 + mii[2]*K3 + mii[3]*K4 + mii[4]*K5 + mii[5]*K6;
		Uref = mii[0]*Uref1 + mii[1]*Uref2 + mii[2]*Uref3 + mii[3]*Uref4 + mii[4]*Uref5 + mii[5]*Uref6;
		Angleref = mii[0]*Angleref1 + mii[1]*Angleref2 + mii[2]*Angleref3 + mii[3]*Angleref4 + mii[4]*Angleref5 + mii[5]*Angleref6;
		Xref(12) = Angleref;
		Xref(13) = Angleref;
		//Control law
		Erro = (X-Xref);
		Input = K*Erro + Uref;

		//data to be saved
		SaveData(0) = uvw(0);
		SaveData(1) = uvw(1);
		SaveData(2) = uvw(2);
		SaveData(3) = pqr(0);
		SaveData(4) = pqr(1);
		SaveData(5) = pqr(2);
		SaveData(6) = msg.values.at(14);
		SaveData(7) = msg.values.at(15);
		SaveData(8) = msg.values.at(0);
		SaveData(9) = msg.values.at(1);
		SaveData(10) = msg.values.at(2);
		SaveData(11) = msg.values.at(3);
		SaveData(12) = msg.values.at(4);
		SaveData(13) = X(11);
		SaveData(14) = msg.values.at(6);
		SaveData(15) = msg.values.at(7);

		SaveDataRef(0) = Xref(0);
		SaveDataRef(1) = Xref(1);
		SaveDataRef(2) = Xref(2);
		SaveDataRef(3) = Trajectory(3);
		SaveDataRef(4) = Trajectory(4);
		SaveDataRef(5) = Trajectory(5);
		SaveDataRef(6) = Trajectory(6);
		SaveDataRef(7) = Trajectory(7);
		SaveDataRef(8) = Trajectory(8);
		SaveDataRef(9) = Trajectory(9);
		SaveDataRef(10) = Trajectory(10);
		SaveDataRef(11) = Trajectory(11);
		SaveDataRef(12) = Trajectory(12);
		SaveDataRef(13) = Trajectory(13);
		SaveDataRef(14) = Xref(12);
		SaveDataRef(15) = Xref(13);

		SaveDataError = SaveData - SaveDataRef;

		//apply control inputs
		std::vector<double> out(Input.data(), Input.data() + Input.rows() * Input.cols());
		return out;
	}

	public: std::vector<double> Reference()
	{
		std::vector<double> out(SaveDataRef.data(), SaveDataRef.data() + SaveDataRef.rows() * SaveDataRef.cols());
		return out;
	}

	public: std::vector<double> Error()
	{
		std::vector<double> out(SaveDataError.data(), SaveDataError.data() + SaveDataError.rows() * SaveDataError.cols());
		return out;
	}

	public: std::vector<double> State()
	{
		std::vector<double> out(SaveData.data(), SaveData.data() + SaveData.rows() * SaveData.cols());
		return out;
	}
};


extern "C"
{
	Icontroller *create(void) {return new vant3_adaptiveMixCtrl;}
	void destroy(Icontroller *p) {delete p;}
}
